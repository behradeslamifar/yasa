#!/bin/bash

# This is file contain main function of yasa, that run in background 
# with yasa-cli and yasa-web
# Copyright (C) 2016 Behrad Eslamifar <b.eslamifar@cvak.ir> and IOI
# This is properitary software and cant freely distributed.

host_add_generate_puppet_config() {
    ## generate new site.pp for puppet configuration and reload puppet
    # local variables
    local tempdir=/etc/yasa/temp/puppet
    local puppetconf=/etc/puppet/manifests/site.pp
    local response

    cat $tempdir/* > $puppetconf

    if [ -x "/bin/systemctl" ]
    then
	systemctl restart puppetmaster

	# get exit status
	response=$?

	if [ "$response" != "0" ]
	then
	    dialog --backtitle "Host Management" --title "Generate Config" --msgbox "Puppet reconfiguration failed. Please check puppet site.pp manually" 6 70

	    return 1
	fi
    else
	invoke-rc.d puppetmaster restart

	# get exit status
	response=$?

	if [ "$reponse" != "0" ]
	then
	    dialog --backtitle "Host Management" --title "Generate Config" --msgbox "Puppet reconfiguration failed. Please check puppet manually" 6 70

	    return 1
	fi

    fi

    return 0
}

host_add_puppet() {
    ## add client to puppet config to generate new config
    # local variables
    local response
    local hostid=$1
    local tempfile=/etc/yasa/temp/puppet/10-hosts

    if [ -z "$hostid" ]
    then
	dialog --backtitle "Host Management" --title "Generate Config" --msgbox "Hostname variable is empty. Please report to developer" 6 70

	return 1
    fi

    if [ ! -z "$(grep "'$hostid'" $tempfile)" ]
    then
	echo "This host exist in config" > /dev/null

	return 0
    fi

    sed -i 's/^\(.\+\)$/\1,/' $tempfile
    echo "    '$hostid'" >> $tempfile

    # generate site.pp
    host_add_generate_puppet_config

    return 0
}

host_write_rule() { 
    # temperorly file 
    TEMP=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM
    
    local hostid="$1"
    local hostpath="$CLIENTHOME/$hostid"
    local groupid

    if [ -e $hostpath/temp/grp.* ]
    then
	groupid=$(ls $hostpath/temp/grp.*)
	groupid=${groupid##*.}
	cp $GRPHOME/$groupid/etc/$UDEVCONF $CLIENTHOME/$hostid/etc/
    
    else
	echo "" > "$hostpath/temp/25-default-whitelist"
	cat "$hostpath/temp/$WCLASS" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$hostpath/temp/25-default-whitelist"
	done
	
	echo "" > "$hostpath/temp/20-whitelist"
        cat "$hostpath/temp/$WDEVICE" | grep -v "^#\|^$" > $TEMP
	
	while read validtime vid pid serial 
	do
	        if [ -z "$serial" -a -z "$pid" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ENV{valid}=\"1\""  >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ENV{valid}=\"2\""  >> "$hostpath/temp/20-whitelist"
		elif [ -z "$serial" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$hostpath/temp/20-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$hostpath/temp/20-whitelist"
	        fi
	done < $TEMP
	
	for I in $hostpath/temp/[0-9]*
	do
		if [ ! -z "$(echo $I | grep '10-header$')" ]
		then
			cat $I > "$hostpath/etc/$UDEVCONF"
		else 
			cat $I >> "$hostpath/etc/$UDEVCONF"
		fi
	done
    fi

	#remove temp file
	[ -f "$TEMP" ] && rm $TEMP

	return 0
}

host_deploy_config() { 
	local hostid="$1"
	local mod=$2
	local response
	local sshcmd
	local scpcmd
	local confighome=/etc/yasa/puppet/files/hosts/$hostid/etc/10-yasa.rules

	if [ "$DEVELOP" == "0" ] 
	then
	    if [ "$DEPLOY_TYPE" == "puppet" ]
	    then
		puppet kick $hostid >/dev/null 2>&1
		response=$?
		
		if [ "$response" != "0" ]
		then
			[ "$mod" != "silent" ] && dialog --msgbox "$hostid deployment failed. Check your network connection and try again." 6 70 

			log_main 106 $hostid - - - Deployment failed.
			
			return 1
		fi
	    elif [ "$DEPLOY_TYPE" == "ssh" ]
	    then
		sshcmd="ssh -oStrictHostKeyChecking=no -i $KEYSDIR/server"
		scpcmd="scp -oStrictHostKeyChecking=no -i $KEYSDIR/server"

		$scpcmd $confighome root@$hostid:/etc/udev/rules.d/

		# get response
		response=$?

		if [ "$response" != "0" ]
		then
			[ "$mod" != "silent" ] && dialog --msgbox "$hostid deployment failed. Check your network connection and try again." 6 70 

			log_main 106 $hostid - - - Deployment failed.
			
			return 1
		fi

		$sshcmd root@$hostid "/sbin/udevadm control --reload; /sbin/udevadm trigger -c add -t devices -s usb"

		# get response
		response=$?

		if [ "$response" != "0" ]
		then
			[ "$mod" != "silent" ] && dialog --msgbox "$hostid deployment failed. Check your network connection and try again." 6 70 

			log_main 106 $hostid - - - Deployment failed.
			
			return 1
		fi

	    elif [ "$DEPLOY_TYPE" == "salt" ]
	    then
		echo "Not implemented"
	    fi
	fi

	log_main 107 $hostid - - - Deploy configuration successfully. 
	
	return 0
}

device_existence_check() {
	## This function check existance of device in whitelist
	## $1 -> host,group , $2 -> hostid,groupid 
	local type=$1
	local id=$2
	local groupid="$3"
        local vendorid="$4"
        local productid="$5"
        local serial="$6"

	# set home
	if [ "$type" == "host" ]
	then
		home=$CLIENTHOME
	else
		home=$GRPHOME
	fi

	# return 1 if device not added befor
	[ -z $(grep ".*$vendorid.*$productid.*$serial.*" $home/$id/temp/$WDEVICE | cut -f 1 -d " ") ] && return 1

	# return 0 if device already exist 
	return 0
}

class_existence_check() {
	## This function check existance of class in whitelist
	## $1 -> host,group , $2 -> hostid,groupid 
	local type=$1
	local id=$2
	local classid="$3"

	# set home
	if [ "$type" == "host" ]
	then
		home=$CLIENTHOME
	else
		home=$GRPHOME
	fi

	# return 1 if device not added befor
	[ -z $(grep "$classid" $home/$id/temp/$WCLASS | cut -f 1 -d " ") ] && echo "off" && return 1

	# return 0 if device already exist 
	echo "on"	

	return 0

}

group_udev_gen() {
    # temperorly file 
    TEMP=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM
    
    local groupid="$1"
    local grouppath="$GRPHOME/$groupid"

	echo "" > "$grouppath/temp/25-default-whitelist"
	cat "$grouppath/temp/$WCLASS" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$grouppath/temp/25-default-whitelist"
	done
	
	echo "" > "$grouppath/temp/20-whitelist"
        cat "$grouppath/temp/$WDEVICE" | grep -v "^#\|^$" > $TEMP
	
	while read validtime vid pid serial 
	do
	        if [ -z "$serial" -a -z "$pid" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ENV{valid}=\"1\""  >> "$grouppath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ENV{valid}=\"2\""  >> "$grouppath/temp/20-whitelist"
		elif [ -z "$serial" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$grouppath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$grouppath/temp/20-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$grouppath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$grouppath/temp/20-whitelist"
	        fi
	done < $TEMP
	
	for I in $grouppath/temp/[0-9]*
	do
		if [ ! -z "$(echo $I | grep '10-header$')" ]
		then
			cat $I > "$grouppath/etc/$UDEVCONF"
		else 
			cat $I >> "$grouppath/etc/$UDEVCONF"
		fi
	done

	#remove temp file
	[ -f "$TEMP" ] && rm $TEMP

	return 0

}

group_find_member() {
	# define local variable
	local groupid="$1"
	local hostid="$2"

	group_member=$(ls $CLIENTHOME/$hostid/temp/grp.* 2>/dev/null | grep "\<$groupid\>")
	if [ ! -z "$group_member" ]
	then 
		echo "on"
	else
		echo "off"
	fi

	return 0
}


