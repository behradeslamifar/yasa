#!/bin/bash

# This script is based on IOI organization request for control on USB connections 
# and devices. 
# Copyright (C) 2016 Behrad Eslamifar <b.eslamifar@cvak.ir> and IOI
# This is properitary software and cant freely distributed.
# 
# gmagr script for manage groups in yasa
# usage: gmgr <create|delete|rule-gen|add-member> [arg]
#
# Version number (may use later)
version=0.1

# System variable
source /etc/default/yasa

function_select=$1
shift
arg="$@"

usage() {
    echo "Usage: gmgr <create|delete|rule-gen|add-member> [arg]"

    return 0
}

log() {
    # local variables
    local severity=$1
    shift

    if [ -z "$severity" ] 
    then
	usage
	return 1
    elif [ "$severity" != "info"  -a  "$severity" != "warning" -a  "$severity" != "error" ]
    then
	return 1
    fi

    logger -p local0.$severity -t Yasa "$@"

    return 0
} # log

group_list() {
    cut -f 1 -d":" $GROUPFILE | grep -v "^#\|^$"

    return 0
} # group_list

group_name_validate() {
    [ -z "$1" ] && usage && return 1

    if [ -z "$(echo "$1" | egrep "[a-z0-9]{3,100}")" ]
    then
	return 1
    fi

    return 0
} # group_name_validate

group_exist() {
    # local variables
    local groupid=$1 

    [ -z "$groupid" ] && usage && return 1

    if [ -z "$(grep "^$groupid:" $GROUPFILE)" ]
    then
	return 1
    fi

    return 0
} # group_exist

group_generate_udev_rule() {
    # create udev rule
    # local variables
    local groupid=$1
    local grouppath=$GROUPSHOME/$groupid

    [ -z "$groupid" ] && usage && return 1

    # temperorly file 
    TEMP=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM
    
    echo "" > "$grouppath/temp/25-default-whitelist"
    cat "$grouppath/temp/$WCLASS" | grep -v "^#\|^$" | while read line; do
            echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$grouppath/temp/25-default-whitelist"
    done
    
    echo "" > "$grouppath/temp/20-whitelist"
    cat "$grouppath/temp/$WDEVICE" | grep -v "^#\|^$" > $TEMP
    
    while read validtime vid pid serial 
    do
            if [ -z "$serial" -a -z "$pid" ]
    	then
                    echo "ATTR{idVendor}==\"$vid\", ENV{valid}=\"1\""  >> "$grouppath/temp/20-whitelist"
                    echo "ATTRS{idVendor}==\"$vid\", ENV{valid}=\"2\""  >> "$grouppath/temp/20-whitelist"
    	elif [ -z "$serial" ]
    	then
                    echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$grouppath/temp/20-whitelist"
                    echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$grouppath/temp/20-whitelist"
            else
                    echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$grouppath/temp/20-whitelist"
                    echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$grouppath/temp/20-whitelist"
            fi
    done < $TEMP
    
    for I in $grouppath/temp/[0-9]*
    do
    	if [ ! -z "$(echo $I | grep '10-header$')" ]
    	then
    		cat $I > "$grouppath/etc/$UDEVCONF"
    	else 
    		cat $I >> "$grouppath/etc/$UDEVCONF"
    	fi
    done
    
    #remove temp file
    [ -f "$TEMP" ] && rm $TEMP

    return 0
} # group_generate_udev_rule

group_rules_to_member() {
    # local variables
    local groupid=$1
    local hostid=$2

    [ -z "$groupid" ] && usage && return 1

    # second check group existance
    #group_exist $groupid || return 1

    if [ -z "$hostid" ]
    then
	# move all member to nogroup
    	members=$(grep "^$groupid:" $GROUPFILE | cut -f 3 -d ":")

    	if [ ! -z "$members" ]
    	then
    	    members=$(echo $members | tr ',' ' ')
	    for hostid in $members
    	    do
    	        # copy udev rule for all members
		mkdir -p $HOSTSHOME/$hostid/ || true
    	        cp -ar $GROUPSHOME/$groupid/etc $HOSTSHOME/$hostid/
    	    done
    	fi
    else
	$LIBHOME/hmgr exist $hostid || return 1

    	# copy udev rule for all members
	mkdir -p $HOSTSHOME/$hostid/ || true
    	cp -ar $GROUPSHOME/$groupid/etc $HOSTSHOME/$hostid/
    fi

    return 0
} # group_rules_to_member

group_create() {
    # local variables
    local groupid=$1

    [ -z "$groupid" ] && usage && return 1

    # second step group name validation
    group_name_validate $groupid || return 1

    # second check group existance
    group_exist $groupid && return 1

    mkdir -p $GROUPSHOME/$groupid
    cp -ar $GROUPSKELL/* $GROUPSHOME/$groupid

    echo "$groupid:0:" >> $GROUPFILE

    group_generate_udev_rule $groupid

    return 0
} # group_create

group_add_a_member() {
    # local variables
    local groupid=$1
    local hostid=$2

    [ -z "$groupid" -o -z "$hostid" ] && usage && return 1
    [ -z "$(grep "^$groupid:" $GROUPFILE)" ] && return 1
    
    # remove host from old group
    sed -i "/\(:\|,\)$hostid,/ s/$hostid,//" $GROUPFILE

    # add host to new group
    sed -i "s/\(^$groupid:.*\)/\1$hostid,/" $GROUPFILE

    group_rules_to_member $groupid $hostid

    return 0
} # group_add_a_member

group_delete() {
    # local variables
    local groupid=$1
    local members

    if [ -z "$groupid" ]
    then
	return 1
    fi

    # move all member to nogroup
    members=$(grep "^$groupid:" $GROUPFILE | cut -f 3 -d ":")

    if [ ! -z "$members" ]
    then
	members=$(echo $members | tr ',' ' ')
    	for hostid in $members
	do
	    group_add_a_memeber nogroup $hostid
	done
    fi

    # remove group from GROUPFILE
    sed -i "/^$groupid:/ d" $GROUPFILE/$groupid

    # remove group folder from $GROUPSHOME
    rm -r $GROUPSHOME/$groupid
    
    return 0
} # group_delete

group_member_list() {
    # local variables
    local groupid=$1 

    [ -z "$groupid" ] && return 1

    grep "^$groupid:" $GROUPFILE | cut -f 3 -d ":" | tr -d ' ' | tr ',' ' ' 

    return 0
} # group_member_list

group_membership() {
    # local variables
    local groupid=$1
    local hostid=$2
    local stat=$(grep "^$groupid:" GROUPFILE | grep "\(:\|,\)$hostid,")

    if [ -z "$stat" ]
    then
	echo "off"
	return 1
    else
	echo "on"
	return 0
    fi
} # group_membership

group_deploy_stat() {
    # local variables
    local groupid=$1

    [ -z "$groupid" ] && return 1

    if [  "$(cat $GROUPFILE | grep "^$groupid" | cut -f 2 -d ":")" = "0" ]
    then
        echo "0"
        return 0
    else
        echo "1"
        return 1
    fi 
} # group_deploy_stat

group_toggle_stat() {
    # local variables
    local groupid=$1
    local stat=$2

    [ -z "$groupid" ] && return 1
    [ -z "$stat" -o -z "$(echo $stat | grep "0\|1")" ] && return 1

    sed -i "s/^$groupid:[01]$/$groupid:$stat/" $GROUPFILE

    return 0
} # group_toggle_stat

case $function_select in
    create) group_create $arg || exit 1
	;;
    delete) group_delete $arg  || exit 1
	;;
    rule-gen) group_generate_udev_rule $arg || exit 1
	;;
    add-member) group_add_a_member $arg || exit 1
	;;
    validate) group_name_validate $arg || exit 1
	;;
    exist) group_exist $arg || exit 1
	;;
    members) group_member_list $arg || exit 1
	;;
    membership) group_membership $arg || exit 1
	;;
    list) group_list
	;;
    stat) group_deploy_stat $arg || exit 1
	;;
    toggle) group_toggle_stat $arg || exit 1
	;;
    *) echo "Usage: gmgr <create|delete|rule-gen|add-member> [arg]"
	;;
esac

exit 0

