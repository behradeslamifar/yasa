#!/bin/bash

# Disable ctrl+c in program
trap "" SIGINT

# Load default configuration
source /etc/default/yasa

host_add_to_puppet() {
    return 0
} # host_add_to_puppet

host_add() {
    # local variables
    local hostid
    local output=$(mktemp /tmp/output.XXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM

    # add manualy client to puppetserver and test 
    # not needed implement yet

    # save list of signed hosts
    dialog --backtitle "Client Management" --title " Clients List " --menu "Choose a hostname to add Yasa" 11 60 10 $(for hostid in $($LIBHOME/dmgr listsigned ); do $LIBHOME/hmgr exist $hostid || echo -n "$hostid ${hostid%%.*} "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" -o -z "$(<$output)" ]
    then
	dialog --backtitle "Client Management" --title "Error Message" --msgbox "Did not find any host" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" = "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

        return 0
    fi

    # get hostname
    hostid=$(<$output)

    # hostid validation
    if ! $LIBHOME/hmgr validate $hostid
    then
	dialog --backtitle "Client Management" --title "Error Message" --msgbox "Entered hostname is invalid, please use valid format" 6 60 

	# remove temp file
	[ -f "$output" ] && rm $output

	return 1
    fi

    $LIBHOME/hmgr add $hostid

    $LIBHOME/gmgr add-member nogroup $hostid

    $LIBHOME/dmgr update-node $hostid

    # get response
    response=$?

    if [ "$response" = "0" ]
    then
    	dialog --backtitle "Client Management" --title "Add Host" --msgbox "$hostid added successfully" 6 40
    else
    	dialog --backtitle "Client Management" --title "Add Host" --msgbox "$hostid didnt deply successfully. Try force deploy later" 6 60
    fi

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # host_add

host_disable() {
    # local variables
    local hostid
    local groupid
    local response

    local output=$(mktemp /tmp/output.XXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM

    dialog --backtitle "Client Management" --title " Clients List " --menu "Choose a hostname to add Yasa" 11 60 10 $(for hostid in $($LIBHOME/hmgr list); do $LIBHOME/hmgr exist $hostid || echo -n "$hostid ${hostid%%.*} "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" -o -z "$(<$output)" ]
    then
	dialog --backtitle "Client Management" --title "Error Message" --msgbox "Did not find any host" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$reponse" = "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

        return 0
    fi

    # get hostname
    hostid=$(<$output)


    groupid=$($LIBHOME/hmgr findgroup $hostid)

    [ "$groupid" = "nogroup" ] && return 0

    $LIBHOME/gmgr add-member nogroup $hostid

    $LIBHOME/dmgr update-node $hostid

    # get response
    response=$?

    if [ "$response" = "0" ]
    then
    	dialog --backtitle "Client Management" --title "Add Host" --msgbox "$hostid disabled successfully" 6 40
    else
    	dialog --backtitle "Client Management" --title "Add Host" --msgbox "$hostid didnt deply successfully. Try force deploy later" 6 60
    fi

    # remove temp file             
    [ -f "$output" ] && rm $output

    return 0
} # host_disable

failed_host() {
    # local variables
    local response
    local failed
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
 
    dialog --backtitle "Deployment Management" \
	   --title "[ Failed Host List ]" \
	   --checklist "In this list all host be exist but failed host was selected automatically.\nYou select new one to force YasaClient sync with server." 13 60 22 $(for hostid in $($LIBHOME/hmgr list); do echo -n "$hostid ${hostid%%.*} $($LIBHOME/hmgr stat $hostid >/dev/null && echo "off" || echo "on") "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255"  ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any hosts" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" == "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    elif [ -z "$(<$output)" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Didnt any host selected" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    fi

    for hostid in $(<$output)
    do
	$LIBHOME/dmgr update-node $hostid || failed=$failed$hostid,
    done

    dialog --msgbox "Process complete successfully.\nFailed hosts to deploy is: $failed" 6 60

    return 0
} # faild_host


menu_host() {
    # Menu input
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local response
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    while true
    do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Client Management Menu" \
        --title "[ C L I E N T - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-9 to choose an option.\
        Choose the TASK" 16 65 9 \
    	1 "Add a Host" \
    	2 "Disable Host" \
	3 "Failed Host" \
        Exit "Return to Main Menu" 2> $output
    
    	# get response
    	response=$?
    
    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
    	        # remove temp file
    	        [ -f "$output" ] && rm $output
    
    		return 0
    	fi
    
        # make decision
        case $(<$output) in
    	    1) host_add;;
    	    2) host_disable;;
	    3) failed_host;;
            Exit) echo "Bye"; break;;
        esac
    done	

    # remove temp file             
    [ -f "$output" ] && rm $output

    return 0
} # menu_host

group_show_members() {
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
 
    # local variables
    groupid=$1
    $LIBHOME/gmgr members $groupid | tr ' ' '\n' > $output

    if [ -z "$(<$output)" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any members" 6 60 

	# remove temp file             
    	[ -f "$output" ] && rm $output

    	return 0
    fi

    dialog --backtitle "Group Management" --title "Group Member(s)" --textbox $output 10 80

    # remove temp file             
    [ -f "$output" ] && rm $output

    return 0
} # group_show_members

group_show_class() {
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    # local variable
    local groupid=$1
    local response
    
    # Convert to human readable text
    sed -e 's/00/00h Use class information in the Interface Descriptors/' \
        -e 's/00/00h Use class information in the Interface Descriptors/' \
        -e 's/01/01h Audio/' \
        -e 's/02/02h Communications and CDC Control/' \
        -e 's/03/03h HID (Human Interface Device)/' \
        -e 's/05/05h Physical/' \
        -e 's/06/06h Image/' \
        -e 's/07/07h Printer/' \
        -e 's/08/08h Mass Storage/' \
        -e 's/09/09h Hub/' \
        -e 's/0A/0Ah CDC-Data/' \
        -e 's/0B/0Bh Smart Card/' \
        -e 's/0D/0Dh Content Security/' \
        -e 's/0E/0Eh Video/' \
        -e 's/0F/0Fh Personal Healthcare/' \
        -e 's/10/10h Audio\/Video Devices/' \
        -e 's/11/11h Billboard Device Class/' \
        -e 's/12/12h USB Type-C Bridge Class/' \
        -e 's/DC/DCh Diagnostic Device/' \
        -e 's/E0/E0h Wireless Controller/' \
        -e 's/EF/EFh Miscellaneous/' \
        -e 's/FF/FEh Application Specific/' \
        -e 's/FF/FFh Vendor Specific/'  $GROUPSHOME/$groupid/temp/$WCLASS | \
    grep -v "^$" > $output

    if [ -z "$(<$output)" ]
    then
    	echo "There is not exist any class in white list" > $output
    fi
    dialog --backtitle "Group Management" --title "Whitelist Class" --textbox $output 10 80
    
    # remove temp file
    [ -f "$output" ] && rm $output
    			
    return 0
} # group_show_class

group_show_device() {
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    # local variable
    local groupid=$1
    local response
 
    # change unix time to normal time
    sed 's|\(^[1-9][0-9]*\)\( .*\)|date --date=@\1 +%Y/%m/%d-%H:%M"\2"|e' $GROUPSHOME/$groupid/temp/$WDEVICE | cat -s > $output
    if [ -z "$(<$output)" ]
    then
    	echo "There is not exist any device in white list" > $output
    fi
    
    dialog --backtitle "$backtitle" --title "White List Device(s)" --textbox $output 10 80
    
    # remove temp file             
    [ -f "$output" ] && rm $output

    return 0
} # group_show_device

groups() {
    # local variables
    
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT

    # main loop
    while true
    do
	# group list
	dialog --backtitle "Group Management" --title " Group List " --menu "Choose a group name to add Yasa" 11 60 10 $(for groupid in $($LIBHOME/gmgr list); do echo -n "$groupid $groupid "; done) 2> $output

    	# get response
    	response=$?

    	# if user press cancel, escape 
    	if [ "$response" == "255" ]
    	then
    	    dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any group" 6 60 

    	    # remove temp file             
    	    [ -f "$output" ] && rm $output

    	    return 1
    	elif [ "$response" == "1" ]
    	then
    	    # remove temp file             
    	    [ -f "$output" ] && rm $output

    	    return 0
	elif [ -z "$(<$output)" ]
	then
    	    dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not selected any group" 6 60 

    	    # remove temp file             
    	    [ -f "$output" ] && rm $output

	    return 0
    	fi

	# get hostname
	groupid=$(<$output)

	while true
    	do
    	    # choose add or delete device
	    dialog --backtitle "Group Management" --title "[ G R O U P - M O D I F Y ]" \
    	    --menu "Choose what you want to do in \"$groupid\" group.\n\
    	    Press cancel to exit from this menu." 12 60 4 \
    	    1 "Members" \
    	    2 "Permitted USB Classes" \
    	    3 "Permitted Devices" \
    	    4 "Back to Main Menu" 2> $output
    		
	    # get response
    	    response=$?

    	    # if user enter cancel or press esc
    	    if [ "$response" == "1" -o "$response" == "255" ]
    	    then
    	       # remove temp file
    	       [ -f "$output" ] && rm $output

    	           echo "" > $tempdevice
    	       echo "" > $tempclass

    		   return 0
	    fi

	    # make decision
    	    case $(<$output) in
    	       1) group_show_members $groupid;;
    	       2) group_show_class $groupid;;
    	       3) group_show_device $groupid ;;
    	       4) break ;;
	    esac
    	done
 
    done

    # remove temp file             
    [ -f "$output" ] && rm $output

    return 0
} # groups

group_add() {
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    
    # group name variable
    local groupid
    local grouphome
    local response
    
    while true
    do
    	dialog --inputbox "Enter name of new group\nName must be 3 character at least\nOnly use Lowercase Alphabet and Digits" 10 50 2> $output
    
    	# get response
    	response=$?
    
    	# save dialog output in variable
    	groupid=$(<$output)
    	
    	# if user cancel the dialog or press escape 
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then 
    		# remove temp file
    		[ -f "$output" ] && rm $output
    		
    		return 1
    	fi
    
    	# validate group name 
    	if [ -z "$(echo "$groupid" | egrep "[a-z0-9]{3,}")" ] 
    	then
	    dialog --msgbox "Group name not accepted, please use valid format." 6 60
    	elif $LIBHOME/gmgr exist $groupid
        then
            dialog --msgbox "This Group already exists.\nPlease choose another name or use\nmodify group menu for add member" 7 40
    	else 
	    $LIBHOME/gmgr create $groupid
    	
	    break
    	fi
    done

    dialog --msgbox "Group added successfully." 6 60

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # group_add

group_delete() {
    # local variables
    local groupid
    local output=$(mktemp /tmp/output.XXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM

    dialog --backtitle "Group Management" --title " Group List " --menu "Choose a group name to delete from Yasa" 11 60 10 $(for groupid in $($LIBHOME/gmgr list | grep -v "\<nogroup\>"); do echo -n "$groupid $groupid "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" == "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

        return 0
    elif [ -z "$(<$output)" ]
    then
        dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not selected any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    fi

    # get group name
    groupid=$(<$output)

    $LIBHOME/gmgr delete $groupid

    # get response 
    response=$?

    if [ "$response" != "0" ]
    then
	dialog --msgbox "Delete group failed." 6 60

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    fi

    dialog --msgbox "Group deleted successfully." 6 60

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # group_delete

group_members() {
    # local variables
    local groupid
    local hostid
    local respnse
    local failed

    local output=$(mktemp /tmp/output.XXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM

    dialog --backtitle "Group Management" --title " Group List " --menu "Choose a group name to add Yasa" 11 60 10 $(for groupid in $($LIBHOME/gmgr list); do echo -n "$groupid $groupid "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" == "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    elif [ -z "$(<$output)" ]
    then
        dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not selected any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    fi

    # get hostname
    groupid=$(<$output)


    /usr/bin/dialog --backtitle "Group Management" \
		    --title "[ Client List ]" \
		    --checklist "Choose choose hosts for add to new group" 13 60 22 $(for hostid in $($LIBHOME/hmgr list); do echo -n "$hostid ${hostid%%.*} $($LIBHOME/gmgr membership $groupid $hostid) "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any hosts" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" == "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    elif [ -z "$(<$output)" ]
    then
        dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not selected any hosts" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    fi

    for hostid in $(<$output)
    do
	$LIBHOME/gmgr add-member $groupid $hostid

	$LIBHOME/dmgr update-node $hostid || failed=$failed,$hostid
    done

    dialog --msgbox "Process complete successfully.\nFailed hosts to deploy is: $failed" 6 60

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # group_members

class_existence_check() {
        ## This function check existance of class in whitelist
        ## $1 -> host,group , $2 -> hostid,groupid 
        local groupid=$1
        local classid=$2

        # return 1 if device not added befor
        [ -z $(grep -i "$classid" $GROUPSHOME/$groupid/temp/$WCLASS) ] && echo "off" && return 1

        # return 0 if device already exist 
        echo "on"       

        return 0
} # class_existence_check


group_modify_class() {
    # local variables
    local groupid=$1
    local id=$groupid
    local tempclass=$GROUPSHOME/$groupid/temp/class.allow.tmp
    local output=$(mktemp /tmp/usb.XXXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT

    # choose between usb class
    /usr/bin/dialog --backtitle "$backtitle" \
    --title "[ List of USB Class ]" \
    --checklist "Choose a class to add to whitelist" 13 60 22 \
    00h "Use class information in the Interface Descriptors" $(class_existence_check $id 00) \
    01h "Audio" $(class_existence_check $id 01) \
    02h "Communications and CDC Control" $(class_existence_check $id 02) \
    03h "HID (Human Interface Device)" $(class_existence_check $id 03) \
    05h "Physical" $(class_existence_check $id 05) \
    06h "Image" $(class_existence_check $id 06) \
    07h "Printer" $(class_existence_check $id 07) \
    08h "Mass Storage" $(class_existence_check $id 08) \
    09h "Hub" $(class_existence_check $id 09) \
    0Ah "CDC-Data" $(class_existence_check $id 0A) \
    0Bh "Smart Card" $(class_existence_check $id 0B) \
    0Dh "Content Security" $(class_existence_check $id 0D) \
    0Eh "Video" $(class_existence_check $id 0E) \
    0Fh "Personal Healthcare" $(class_existence_check $id 0F) \
    10h "Audio/Video Devices" $(class_existence_check $id 10) \
    11h "Billboard Device Class" $(class_existence_check $id 11) \
    12h "USB Type-C Bridge Class" $(class_existence_check $id 12) \
    DCh "Diagnostic Device" $(class_existence_check $id DC) \
    E0h "Wireless Controller" $(class_existence_check $id E0) \
    EFh "Miscellaneous" $(class_existence_check $id EF) \
    FEh "Application Specific" $(class_existence_check $id FE) \
    FFh "Vendor Specific" $(class_existence_check $id FF) 2> $output

    # save dialog state (find if user press cancel)
    response=$?

    # if user cancel the dialog or press escape 
    if [ "$response" == "1" -o "$response" == "255" ]
    then
            [ -f "$output" ] && rm $output

            return 1
    fi

    # start with fresh class file
    echo "" > $tempclass

    for classid in $(<$output)
    do
            classid=$(echo $classid | tr -d 'h')
            echo $classid >> $tempclass
    done

    $LIBHOME/gmgr toggle $groupid 1

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # group_modify_class

group_modify_device() {
    # local variables
    local groupid=$1
    local keyword
    local tempdevice=$GROUPSHOME/$groupid/temp/dev.allow.tmp
    local log_line_number
    local validtime
    local currenttime
    local exist
    local comment
    
    # define local array
    local log_line_array=()
    local log_line=()

    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local normal_log1=$(mktemp /tmp/usb.XXXXXXX)
    local normal_log2=$(mktemp /tmp/usb.XXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "rm $normal_log1; exit" SIGHUP SIGINT SIGTERM
    trap "rm $normal_log2; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT

    # loop for find device information from Yasa log
    while true
    do
        # search based on ip address
        dialog --backtitle "$backtitle" --inputbox "Please search the keywork to find your device (ip|hostname|device)" 8 80 2> $output
    
        # save dialog state (find if user press cancel)
        response=$?
    
        # save input variable
        keyword=$(<$output)
    
        # if user cancel the dialog or press escape 
        if [ "$response" == "1" -o "$response" == "255" ]
        then
	    [ -f "$output" ] && rm $output
            [ -f "$normal_log1" ] && rm $normal_log1
            [ -f "$normal_log2" ] && rm $normal_log2
            
            return 1
        fi
    
        # normalize log file
        cat $DEVICELOG | grep -i "$keyword" | tail | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' > "$normal_log1"
    
        if [ ! -z "$(<$normal_log1)" ]
        then
	    break
        fi
    done

    # second step normalize log file
    cat "$normal_log1" | cut -f 1,3,5,6,7,8 -d " " > "$normal_log2"
    
    while read n s ; do
        log_line_array+=($n "$s")
    done < $normal_log2
    
    dialog  --backtitle "$backtitle" --title "Founded devices" --menu "Your choozen device will be add to whitelist" 0 80 10 "${log_line_array[@]}" 2> $output

    # get reponse
    response=$?
    
    # get data stored in $output
    log_line_number=$(<$output)
    
    # if user cancel the dialog or press escape 
    if [ "$response" == "1" -o "$response" == "255" ]
    then 
    	# remove temp files
        [ -f "$output" ] && rm $output
        [ -f "$normal_log1" ] && rm $normal_log1
        [ -f "$normal_log2" ] && rm $normal_log2
    
    	return 1
    fi
    
    # pick log line
    log_line=($(sed -n "$log_line_number p" $normal_log2))
    
    # check if device added befor
    device_existence_check $groupid ${log_line[1]#*:} ${log_line[3]#*:} ${log_line[4]#*:} ${log_line[5]#*:} && dialog --backtitle "$backtitle" --msgbox "Device already exist in whitelist" 5 38 && exist=1
    
    # input comment
    if [ "$exist" != "1" ]
    then
    	dialog --backtitle "$backtitle" --inputbox "Write comment for this device" 8 80 "no comment" 2> $output
    
    	# get response
    	response=$?
    
    	comment=$(<$output)
    
    
    	# if user cancel the dialog or press escape 
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then 
	    # remove temp files
    	    [ -f "$output" ] && rm $output
    	    [ -f "$normal_log1" ] && rm $normal_log1
    	    [ -f "$normal_log2" ] && rm $normal_log2
    
    	    return 1
    	fi
    
    	# input box for enter validation time in houre
    	while true
    	do
    		dialog --backtitle "$backtitle" --inputbox "Please enter validation time in houre (enter 0 or leave blank for unlimite time)" 8 80 0 2> $output
    
    		# get response
    		response=$?
    
    		validtime=$(<$output)
    
    		# if user cancel the dialog or press escape 
    		if [ "$response" == "1" -o "$response" == "255" ]
    		then 
    			# remove temp files
    			[ -f "$output" ] && rm $output
    			[ -f "$normal_log1" ] && rm $normal_log1
    			[ -f "$normal_log2" ] && rm $normal_log2
    	
    			return 1
    		fi
    
    		if [ "$validtime" = "0" ]
    		then
    			break
    		elif [ ! -z "$(echo $validtime | grep '^[1-9][0-9]*$')" ]
    		then
    			currenttime=$(date +"%s")
    			validtime=$(( $validtime * 60 * 60 + $currenttime ))
    			break
    		fi
    	done
    
    	# add new device to white list
    	echo -e "# comment $comment \n# ${log_line[1]} ${log_line[2] } \n$validtime ${log_line[3]#*:} ${log_line[4]#*:} ${log_line[5]#*:}\n" >> $tempdevice
    fi

    $LIBHOME/gmgr toggle $groupid 1

    # remove temp file
    [ -f "$output" ] && rm $output
    [ -f "$normal_log1" ] && rm $normal_log1
    [ -f "$normal_log2" ] && rm $normal_log2

    return 0
} # group_modify_device

group_delete_device() {
    # temp file for menu output
    local output=$(mktemp /tmp/usb.XXXXXXX)
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    # define array
    local ar=()
    
    # local variable
    local groupid=$1
    local tempdevice=$GROUPSHOME/$groupid/temp/dev.allow.tmp
    local backtitle
    local device
    local count
    local comment
    local linenum=0
    local line
    
    while read line 
    do
            if [ ! -z "$(echo $line | grep "^# comment" )" ]
            then
    		((linenum++))
                    comment=$line; count=1;
                    continue
            elif [ "$count" = "1" ] && [ ! -z "$(echo $line | grep "^# From")" ]
            then
                    device=$(echo $line | grep -o "Device:.*$")
                    ar+=($linenum "$comment $device")
                    count=0
            fi
    done <$tempdevice
    
    if [ -z "${ar[@]}" ]
    then
    	dialog --backtitle "$backtitle" --msgbox "There isnt any device in whitelist" 5 40

    	# remove temp file
    	[ -f "$output" ] && rm $output
    
    	return 0
    fi
    
    dialog  --backtitle "$backtitle" --title "List of white list" --menu "Choose one for delete from whitelist" 10 80 5 "${ar[@]}" 2> $output
    
    # save menu output
    local devicenum=$(<$output)
    
    if [ ! -z "$devicenum" ]
    then
    	echo "" > $output
    	linenum=0
    
    	while read line
    	do
    		if [ ! -z "$(echo $line | grep "^# comment")" ]
    		then
    			ucomment=$line
    			((linenum++))
    		elif [ ! -z "$(echo $line | grep "^# From:")" ]
    		then
    			scomment=$line
    		elif [ ! -z "$(echo $line | grep "^[0-9]" )" ]
    		then
    			if  [ "$linenum" != "$devicenum" ]
    			then
    				echo -e "$ucomment\n$scomment\n$line" >> $output
    			fi
    		else
    			echo $line >> $output
    		fi
    	done < $tempdevice
    
     	cat -s $output > $tempdevice
    	dialog --backtitle "$backtitle" --msgbox "Device deleted from whitelist" 5 35
    fi
    
    $LIBHOME/gmgr toggle $groupid 1

    # remove temp file
    [ -f "$output" ] && rm $output
	
    return 0
} # group_delete_device

group_save_change() {
    # local variables
    local groupid=$1
    local failed

    if $LIBHOME/gmgr stat
    then
	return 0
    else
	dialog --backtitle "Group Management" --title " Write Change " --yesno "Do you want save change? yes for save/no for discard" 6 60
	# get response                 
        response=$?                    

	if [ "$response" == "0" ]   
	then      
	    cat $GROUPSHOME/$groupid/temp/dev.allow.tmp > $GROUPSHOME/$groupid/temp/dev.allow 
	    cat $GROUPSHOME/$groupid/temp/class.allow.tmp >$GROUPSHOME/$groupid/temp/class.allow 
	    echo "" > $GROUPSHOME/$groupid/temp/class.allow.tmp
	    echo "" > $GROUPSHOME/$groupid/temp/dev.allow.tmp

	    $LIBHOME/gmgr rule-gen $groupid

	    for hostid in $($LIBHOME/gmgr members $groupid)
	    do
		$LIBHOME/gmgr add-member $groupid $hostid
	
		$LIBHOME/dmgr update-node $hostid || failed=$failed,$hostid
	    done
	
	    dialog --msgbox "Process complete successfully.\nFailed hosts to deploy is: $failed" 6 60
	fi

	return 1
    fi

    return 0
} # group_save_change

group_modify() {
    # local variables
    local groupid
    local output=$(mktemp /tmp/usb.XXXXXXXX)

    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT

    # choose group from list
    dialog --backtitle "Group Management" --title " Group List " --menu "Choose a group name to add Yasa" 11 60 10 $(for groupid in $($LIBHOME/gmgr list | grep -v "\<nogroup\>"); do echo -n "$groupid $groupid "; done) 2> $output

    # get response
    response=$?

    # if user press cancel, escape 
    if [ "$response" == "255" ]
    then
	dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not find any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

        return 1
    elif [ "$response" == "1" ]
    then
        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    elif [ -z "$(<$output)" ]
    then
        dialog --backtitle "Group Management" --title "Error Message" --msgbox "Did not selected any group" 6 60 

        # remove temp file             
        [ -f "$output" ] && rm $output

	return 0
    fi

    # get hostname
    groupid=$(<$output)

    local tempdevice=$GROUPSHOME/$groupid/temp/dev.allow.tmp
    local tempclass=$GROUPSHOME/$groupid/temp/class.allow.tmp

    cat $GROUPSHOME/$groupid/temp/dev.allow > $tempdevice
    cat $GROUPSHOME/$groupid/temp/class.allow > $tempclass

    while true
    do
	# choose add or delete device
    	dialog --backtitle "Group Management" --title "[ G R O U P - M O D I F Y ]" \
    	--menu "Choose what you want to do in \"$groupid\" group.\n\
    	Press cancel to exit from this menu." 12 60 4 \
    	1 "Modify USB Classes" \
    	2 "Add Device" \
    	3 "Delete Device" \
	4 "Back to Main Menu (save/discard)" 2> $output
    	
    	# get response
    	response=$?

    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
    	   # remove temp file
    	   [ -f "$output" ] && rm $output

	   echo "" > $tempdevice
	   echo "" > $tempclass

    	   return 0
    	fi

    	# make decision
    	case $(<$output) in
    	   1) group_modify_class $groupid;;
    	   2) group_modify_device $groupid;;
    	   3) group_delete_device $groupid ;;
	   4) group_save_change $groupid; break ;;
    	esac
    done
    
    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # group_modify

menu_group() {
    # Menu input
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local response
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    while true
    do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Yasa Group Management Menu" \
        --title "[ G R O U P - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-9 to choose an option.\
        Choose the TASK" 16 65 6 \
    	1 "Groups" \
    	2 "Add New Group" \
    	3 "Delete a Group" \
    	4 "Group Members" \
    	5 "Modify Group" \
        Exit "Return to Main Menu" 2>"${output}"
    
    	# get response
    	response=$?
    
    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
    	        # remove temp file
    	        [ -f "$output" ] && rm $output
    
    		return 0
    	fi
    
        # make decision
        case $(<$output) in
	    1) groups;;
    	    2) group_add;;
    	    3) group_delete;;
    	    4) group_members;;
    	    5) group_modify;;
            Exit) break;;
        esac
    done	

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # menu_group

menu_report() {
    # Menu input
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local response
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    while true
    do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Yasa Report Menu" \
        --title "[ R E P O R T - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-9 to choose an option.\
        Choose the TASK" 16 65 6 \
    	1 "Add/Remove Clients" \
    	2 "Add/Remove Groups" \
    	3 "Deploying Rules" \
    	4 "Report based on custom search" \
        Exit "Return to Main Menu" 2>"${output}"
    
    	# get response
    	response=$?
    
    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
	    # remove temp file
	    [ -f "$output" ] && rm $output
    
	    return 0
    	fi
    
        # make decision
        case $(<$output) in
    	    1) report_add_remove_hosts;;
    	    2) report_add_remove_groups;;
    	    3) report_deploy_config;;
    	    4) report_custom_search;;
            Exit) break;;
        esac
    done	

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # menu_report

about_yasa() {
    # local variables
    dialog --backtitle "Yasa Management and Utility" --title "About Yasa" --msgbox "Yasa is project to control and monitor USB devices " 10 80
    
    return 0
} # about_yasa

menu_other() {
    # Menu input
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local response
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    while true
    do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Yasa Install Menu" \
        --title "[ M A N A G E M E M E N T - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-9 to choose an option.\
        Choose the TASK" 16 65 9 \
    	1 "About" \
        Exit "Return to Main Menu" 2>"${output}"
    
    	# get response
    	response=$?
    
    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
	    # remove temp file
    	    [ -f "$output" ] && rm $output
    
    	    return 0
    	fi
    
        # make decision
        case $(<$output) in
    	    1) about_yasa;;
            Exit) break;;
        esac
    done	

    # remove temp file
    [ -f "$output" ] && rm $output

    return 0
} # menu_other

main_menu() {
    # Menu input
    local output=$(mktemp /tmp/usb.XXXXXXXX)
    local response
    
    # trap and delete temp file
    trap "rm $output; exit" SIGHUP SIGINT SIGTERM
    trap "" SIGINT
    
    while true
    do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Yasa Main Menu" \
        --title "[ M A I N - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-4 to choose an option.\
        Choose the TASK" 16 65 5 \
    	1 "Client Management" \
    	2 "Group Management" \
	4 "Failed Host" \
        5 "Other" \
        Exit "Exit and Logout" 2>"$output"
    
        #3 "Reports" \
    
    	# get response
    	response=$?
    
    	# if user enter cancel or press esc
    	if [ "$response" == "1" -o "$response" == "255" ]
    	then
	    # remove temp file
    	    [ -f "$output" ] && rm $output
    
    	    return 0
    	fi
    
        # make decision
        case $(<$output) in
    	    1) menu_host;;
    	    2) menu_group;;
            3) menu_report;;
	    4) failed_host ;;
            5) menu_other;;
            Exit) echo "Bye"; break;;
        esac
    done
    
    [ -f "$output" ] && rm $output
    
    return 0
} # main_menu

main_menu

exit 0
