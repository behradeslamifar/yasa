#!/bin/bash

# host base dir
HOST_DIR='/etc/puppet/files/hosts/'

# usblock udev rules file
RULES_FILE='/etc/udev/rules.d/10-usblock.rules'

# default white list
DEF_WHITELIST_FILE='/etc/usblock/20-default-whitelist'

# white list rule
WHITELIST_FILE='/etc/usblock/80-whitelist'

# usblock rules
RULES='/etc/usblock/usb.allow'

# default rules 
DEF_RULES='/etc/usblock/usb.default'

rule_exist() {
	local hostid="$1"
        local vendorid="$2"
        local productid="$3"
        local serial="$4"

	# return 1 if device not added 
	[ -z $(grep ".*$vendorid.*$productid.*$serial.*" $HOST_DIR/$hostid/temp/usb.allow | cut -f 1 -d " ") ] && return 1

	# return 0 if device already exist 
	return 0
}

def_rule_exist() {
	local hostid="$1"
        local class="$2"

	# return 1 not exist
        [ -z $(grep -o "$class" $HOST_DIR/$hostid/temp/usb.default | cut -f 1 -d " ") ] && return 1

	# retrun 0 if class exit in whitelist
        return 0

}

write_rule() {
	# temperorly file 
	TEMP=$(mktemp /tmp/usb.XXXXXXXX)

	# trap and delete temp file
	trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM

	local basepath="$1"

	echo "" > "$basepath/temp/20-default-whitelist"
	cat "$basepath/temp/usb.default" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ATTRS{authorized_default}==\"1\", GOTO=\"oakusb_rules_end\""  >> "$basepath/temp/20-default-whitelist"
	done
	
	local ar=()

	echo "" > "$basepath/temp/80-whitelist"
        cat "$basepath/temp/usb.allow" | grep -v "^#\|^$" > $TEMP
	 while read vid pid serial ;do
		ar=($(echo ${loop}))
	        if [ "$PRINT_HEADER" ]; then
	                PRINT_HEADER=
	                echo "# This file was automatically generated by the $0"
	                echo "# You can modify it, as long as you keep each rule on a single"
	        fi
	
	        echo ""
	        # [ "$comment" ] && echo "# $comment"
	        if [ -z "$serial" ]; then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$basepath/temp/80-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$basepath/temp/80-whitelist"
	        fi
	done < $TEMP
	
	cat $basepath/temp/[0-9]* > "$basepath/etc/10-usblock.rules"
	
	[ -f "$TEMP" ] && rm $TEMP
	return 0
}


addnew() {

	# temperorly file 
	local INPUT1=$(mktemp usb.XXXXXXXX)
	local INPUT2=$(mktemp usb.XXXXXXXX)
	
	# menu output
	local OUTPUT=$(mktemp /tmp/output.XXXXXXX)

	# define local array
	local ar=()
	local newwhite=()

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	tail /var/log/usblock.log | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' >$INPUT2
	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"
	while read n s ; do
	    ar+=($n "$s")
	done < $INPUT1
	dialog  --title "10 Latest Devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${ar[@]}" 2> $OUTPUT

	NUM=$(<$OUTPUT)
	if [ "$NUM" = "" ]
	then 
		return 1
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT
	fi
	newwhite=($(sed -n "$NUM p" $INPUT1))

	# check if device added befor
	rule_exist ${newwhite[1]#*:} ${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:} && dialog --msgbox "Device already exist in whitelist" 5 38 && return 1

	# input comment
	dialog --inputbox "Write comment for this device" 8 80 2> $OUTPUT
	local comment=$(<$OUTPUT)

	# add new device to white list
	echo -e "# comment $comment \n# ${newwhite[1]} ${newwhite[2] } \n${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:}\n" >> $HOST_DIR/${newwhite[1]#*:}/temp/usb.allow
		
	write_rule "$HOST_DIR/${newwhite[1]#*:}"

#	{ tail /var/log/usblock.log | while read usbtime usbhost usbip usbvid usbpid usbserial
#	do
#		echo "$usbtime"
#		echo "$usbhost $usbip"
#		echo "$usbvid $usbpid $usbserial"
#		read -u 3 -n 1 -p "Do you want add this device to whitelist (N/y): " ADDUSB
#	done
#	} 3<&0

	# remove temp file if exist
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$OUTPUT" ] && rm $OUTPUT

	puppet kick ${newwhite[1]#*:}

	return 0	
}

addnewip() {
	# temperorly file 
	local INPUT1=$(mktemp usb.XXXXXXXX)
	local INPUT2=$(mktemp usb.XXXXXXXX)
	
	# menu output
	local OUTPUT=$(mktemp /tmp/output.XXXXXXX)

	# define local array
	local ar=()
	local newwhite=()

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $OUTPUT; exit" SIGHUP SIGINT SIGTERM
	
	# search based on ip address
	dialog --inputbox "Write comment for this device" 8 80 2> $OUTPUT

	# save input variable
	ipadd=$($OUTPUT)

	cat /var/log/usblock.log | grep "$ipadd" | tail | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' >$INPUT2
	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"
	while read n s ; do
	    ar+=($n "$s")
	done < $INPUT1
	dialog  --title "10 Latest Devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${ar[@]}" 2> $OUTPUT

	NUM=$(<$OUTPUT)
	if [ "$NUM" = "" ]
	then 
		return 1
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT
	fi
	newwhite=($(sed -n "$NUM p" $INPUT1))

	# check if device added befor
	rule_exist ${newwhite[1]#*:} ${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:} && dialog --msgbox "Device already exist in whitelist" 5 38 && return 1

	# input comment
	dialog --inputbox "Write comment for this device" 8 80 2> $OUTPUT
	local comment=$(<$OUTPUT)

	# add new device to white list
	echo -e "# comment $comment \n# ${newwhite[1]} ${newwhite[2] } \n${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:}\n" >> $HOST_DIR/${newwhite[1]#*:}/temp/usb.allow
		
	write_rule "$HOST_DIR/${newwhite[1]#*:}"

	# remove temp file if exist
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$OUTPUT" ] && rm $OUTPUT
	
	puppet kick ${newwhite[1]#*:}

	return 0
}

addnewclass() {
	# temp file for dialog output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# choose between usb class
        /usr/bin/dialog --clear --backtitle "Usb lock main menu" \
        --title "[ List of USB Class ]" \
        --menu "Choose a class to add to whitelist" 13 60 6 \
	00h "Use class information in the Interface Descriptors" \
	01h "Audio"   \
	02h "Communications and CDC Control" \
	03h "HID (Human Interface Device)" \
	05h "Physical" \
	06h "Image" \
	07h "Printer" \
	08h "Mass Storage" \
	09h "Hub" \
	0Ah "CDC-Data" \
	0Bh "Smart Card" \
	0Dh "Content Security" \
	0Eh "Video" \
	0Fh "Personal Healthcare" \
	10h "Audio/Video Devices" \
	11h "Billboard Device Class" \
	12h "USB Type-C Bridge Class" \
	DCh "Diagnostic Device" \
	E0h "Wireless Controller" \
	EFh "Miscellaneous" \
	FEh "Application Specific" \
	FFh "Vendor Specific" 2> $OUTPUT
	
	# save menu output
	local class=$(cat $OUTPUT | tr -d 'h')

	# count number of host
	local hostsum=$(ls $HOST_DIR | wc -l)
	((hostsum++))

	dialog --title "Choos host(s)" --checklist "Choose one/more/all host(s) to update whitelist" 10 60 $hostsum all hosts on $(for i in $HOST_DIR/*; do j=${i##*/}; echo "$j ${j%%.*} off " | tr -d "\n"; done) 2> $OUTPUT

	for i in $(<$OUTPUT)	
	do
		if [ "$i" == "all" ]
		then
			for j in $HOST_DIR/*
			do
				def_rule_exist ${j##*/} $class && continue
				echo $class >> $j/temp/usb.default			
				write_rule "$j/"
			done
			break
		fi
		
		# if all not selected
		def_rule_exist $i $class && continue
		echo $class >> $HOST_DIR/$i/temp/usb.default			
		write_rule $HOST_DIR/$i
	done

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT
	

	return 0
}


showwhitedev() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $HOST_DIR | wc -l)
	((hostsum++))

	dialog --title "Choose host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $HOST_DIR/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)

	dialog --textbox $HOST_DIR/$hostid/temp/usb.allow 10 80

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0
}

showwhiteclass() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $HOST_DIR | wc -l)
	((hostsum++))

	dialog --title "Choos host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $HOST_DIR/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)

	dialog --textbox $HOST_DIR/$hostid/temp/usb.default 10 80

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0
}

deldev() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $HOST_DIR | wc -l)
	((hostsum++))

	# define array
	local ar=()

	dialog --title "Choos host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $HOST_DIR/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)
	local linenum=0

	while read line 
	do
	        if [ ! -z "$(echo $line | grep "^# comment" )" ]
	        then
			((linenum++))
	                comment=$line; count=1;
	                continue
	        elif [ "$count" = "1" ]
	        then
	                device=$(echo $line | grep -o "Device:.*$")
	                ar+=($linenum "$comment $device")
	                count=0
	        fi
	done <$HOST_DIR/$hostid/temp/usb.allow	
	
	echo "${ar[@]}"
	dialog  --title "List of white list" --menu "Choose one for delete from whitelist" 10 80 5 "${ar[@]}" 2> $OUTPUT

	# save menu output
	local devicenum=$(<$OUTPUT)

	echo "" > $OUTPUT
	linenum=0
	while read line 
	do
	        if [ ! -z "$(echo $line | grep "^# comment" )" ]
	        then
			((linenum++))
			if [ "$linenum" = "$devicenum" ]
			then
				continue
			else
				echo "$line" >> $OUTPUT
			fi
	        else
			if [ "$linenum" = "$devicenum" ]
			then
				continue
			else
				echo "$line" >> $OUTPUT
			fi
	        fi
	done <$HOST_DIR/$hostid/temp/usb.allow	

 	cp $OUTPUT $HOST_DIR/$hostid/temp/usb.allow	

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	# generate udev rule
	write_rule "$HOST_DIR/$hostid/"

	return 0
}

delclass() {
	echo "N"

}

addnewhost() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# hostname variable
	local hostid

	dialog --inputbox "Enter new hostname FQDN (only use a-z and digits)" 10 60 2> $OUTPUT
	hostid=$(<$OUTPUT)

	# validate hostname FQDN
	if [ -z "$(echo "$hostid" | egrep "^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9_-]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,})$")" ] 
	then
		dialog --msgbox "Entered hostname is invalid, please use valid format" 6 60
		
	elif [ ! -z "$(ls $HOST_DIR | grep "^$hostid$")" ]
	then
		dialog --msgbox "This host is exists" 5 25
	else
		mkdir -p $HOST_DIR/$hostid
		cp -r /etc/yasa/temp $HOST_DIR/$hostid
		cp -r /etc/yasa/etc $HOST_DIR/$hostid
		write_rule $HOST_DIR/$hostid/
	fi

		


	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0

}

openhost() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# hostname variable
	local hostid

        # count number of host
        local hostsum=$(ls $HOST_DIR | wc -l)
        ((hostsum++))

        dialog --title "Choose host(s)" --menu "Choose one host to open all usb port" 10 60 $hostsum $(for i in $HOST_DIR/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

        # save menu output
        local hostid=$(<$OUTPUT)

	# open all usb device, must restart system
	cp /etc/yasa/etc/10-usblock-open.rules $HOST_DIR/$hostid/etc/10-usblock.rules
	
	# run puppet kick
	puppet kick $hostid
}

# Menu input
MAININPUT=$(mktemp /tmp/usb.XXXXXXXX)

# trap and delete temp file
trap "rm $MAININPUT; exit" SIGHUP SIGINT SIGTERM

while true
do
        ### display main menu ###
        /usr/bin/dialog --clear --backtitle "Usb lock main menu" \
        --title "[ M A I N - M E N U ]" \
        --menu "You can use the UP/DOWN arrow keys, the first \
        letter of the choice as a hot key, or the \
        number keys 1-9 to choose an option.\
        Choose the TASK" 19 65 10 \
        1 "Add new device based on last ten entry" \
        2 "Add new device based on client IP address" \
	3 "Add new class to white list" \
	4 "Show device white list" \
	5 "Show class white list" \
	6 "Delete device from white list" \
	7 "Delete class from white list" \
	8 "Add new host" \
	9 "Open all usb port" \
        Exit "Exit and Logout" 2>"${MAININPUT}"

        menuitem=$(<"${MAININPUT}")


        # make decsion
        case $menuitem in
                1) addnew;;
                2) addnewip;;
		3) addnewclass;;
		4) showwhitedev;;
		5) showwhiteclass;;
		6) deldev;;
		7) delclass;;
		8) addnewhost;;
		9) openhost;;
                Exit) echo "Bye"; break;;
        esac

#
#	#clear
#	echo "1- Add new device based on last ten entry"
#	echo "2- Add new device based on client IP address"
#	echo "3- Enter q or 3 for quit"
#	echo -n "Choose one of the above: "
#	read -n 1 SELECT
#	echo ""
#	
#	case $SELECT in
#		1) addnew
#		;;
#		2) addnewip
#		;;
#		q|3) break
#		;;
#	esac
done

[ -f "$MAININPUT" ] && rm $MAININPUT 

exit 0
