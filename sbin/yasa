#!/bin/bash

# development state
develop=1

# default file
TEMPHOME='/etc/yasa/skell'

# puppet home (ln -s /etc/yasa/puppet /etc/puppet/modules/yasa)
PUPPETHOME='/etc/yasa/puppet'

# white list files
WDEVICE='dev.allow'
WCLASS='class.allow'
WDEF='default'

# default policy (class, deauthorized)
#DEFPOL='default'

# clients home
# $CLIENTHOME/$fqdn/
CLIENTHOME='/etc/yasa/puppet/files/hosts'

# require fuctions that help simple programing
# host_exist
#
# This script need use global variable structure

group_addrule() {
	echo "N"
}

group_add() {
	echo "N"
}

group_del() {
	echo "N"
}

group_exist() {
	echo "N"
}

group_adddelhost() {
	echo "N"
}

group_showrule() {
	echo "N"
}

group_showmember() {
	echo "N"
}

report_log() {
	echo "N"
}

report_peruser() {
	echo "N"
}

report_indays() {
	echo "N"
}

rule_exist() {
	local hostid="$1"
        local vendorid="$2"
        local productid="$3"
        local serial="$4"

	# return 1 if device not added 
	[ -z $(grep ".*$vendorid.*$productid.*$serial.*" $CLIENTHOME/$hostid/temp/$WDEVICE | cut -f 1 -d " ") ] && return 1

	# return 0 if device already exist 
	return 0
}

def_rule_exist() {
	local hostid="$1"
        local class="$2"

	# return 1 not exist
        [ -z $(grep -o "$class" $CLIENTHOME/$hostid/temp/$WCLASS | cut -f 1 -d " ") ] && return 1

	# retrun 0 if class exit in whitelist
        return 0

}

write_rule() {
	# temperorly file 
	TEMP=$(mktemp /tmp/usb.XXXXXXXX)

	# trap and delete temp file
	trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM

	local basepath="$1"

	echo "" > "$basepath/temp/25-default-whitelist"
	cat "$basepath/temp/$WCLASS" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$basepath/temp/25-default-whitelist"
	done
	
	local ar=()

	echo "" > "$basepath/temp/20-whitelist"
        cat "$basepath/temp/$WDEVICE" | grep -v "^#\|^$" > $TEMP
	
	while read validtime vid pid serial 
	do
		#ar=($(echo ${loop}))
		#        echo ""
	        # [ "$comment" ] && echo "# $comment"
	        if [ -z "$serial" ]; then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$basepath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$basepath/temp/20-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$basepath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$basepath/temp/20-whitelist"
	        fi
	done < $TEMP
	
	for I in $basepath/temp/[0-9]*
	do
		if [ ! -z "$(echo $I | grep '10-header$')" ]
		then
			cat $I > "$basepath/etc/10-usblock.rules"
		else 
			cat $I >> "$basepath/etc/10-usblock.rules"
		fi
	done

	[ -f "$TEMP" ] && rm $TEMP
	return 0
}


addnew() {
	local validtime=0
	local currenttime

	# temperorly file 
	local INPUT1=$(mktemp /tmp/usb.XXXXXXXX)
	local INPUT2=$(mktemp /tmp/usb.XXXXXXXX)
	
	# menu output
	local OUTPUT=$(mktemp /tmp/output.XXXXXXX)

	# define local array
	local ar=()
	local newwhite=()

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	tail /var/log/usblock.log | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' >$INPUT2
	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"
	while read n s ; do
	    ar+=($n "$s")
	done < $INPUT1
	dialog  --title "10 Latest Devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${ar[@]}" 2> $OUTPUT

	NUM=$(<$OUTPUT)

	# if user chose cancel
	if [ "$NUM" = "" ]
	then 
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT

		return 1
	fi
	newwhite=($(sed -n "$NUM p" $INPUT1))

	if [ -z "$(ls $CLIENTHOME | grep "^${newwhite[1]#*:}$")" ]
        then
                dialog --msgbox "This host not added to yasa befor.\nPlease use \"Add new host\" in Main menu" 7 45
                [ -f "$INPUT1" ] && rm $INPUT1
                [ -f "$INPUT2" ] && rm $INPUT2
                [ -f "$OUTPUT" ] && rm $OUTPUT
		return 1
	elif  rule_exist ${newwhite[1]#*:} ${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:}
	then
		# check if device added befor
	 	dialog --msgbox "Device already exist in whitelist" 5 38
                [ -f "$INPUT1" ] && rm $INPUT1
                [ -f "$INPUT2" ] && rm $INPUT2
                [ -f "$OUTPUT" ] && rm $OUTPUT
		return 1
	fi
	# input comment
	dialog --inputbox "Write comment for this device" 8 80 "no comment" 2> $OUTPUT
	local comment=$(<$OUTPUT)

	# if user chose cancel
	if [ -z "$comment" ]
	then
		# remove temp file if exist
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT

		return 0
	fi

	# input box for enter validation time in houre
	while true
	do
		dialog --inputbox "Please enter validation time in houre (enter 0 or leave blank for unlimite time)" 8 80 0 2> $OUTPUT
		validtime=$(<$OUTPUT)

		# if user chose cancel
		if [ -z "$validtime" ]
		then
			# remove temp file if exist
			[ -f "$INPUT1" ] && rm $INPUT1
			[ -f "$INPUT2" ] && rm $INPUT2
			[ -f "$OUTPUT" ] && rm $OUTPUT
	
			return 0
		fi


		if [ -z "$validtime" ] || [ "$validtime" = "0" ]
		then
			validtime=0
			break
		elif [ ! -z "$(echo $validtime | grep '^[1-9][0-9]*$')" ]
		then
			currenttime=$(date +"%s")
			validtime=$(( $validtime * 60 * 60 + $currenttime ))
			break
		fi
	done

	# add new device to white list
	echo -e "# comment $comment \n# ${newwhite[1]} ${newwhite[2] } \n$validtime ${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:}\n" >> $CLIENTHOME/${newwhite[1]#*:}/temp/$WDEVICE
		
	write_rule "$CLIENTHOME/${newwhite[1]#*:}"
	dialog --msgbox "Device added successfully" 5 30

	# remove temp file if exist
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$OUTPUT" ] && rm $OUTPUT

	[ "$develop" != 1 ] &&  puppet kick ${newwhite[1]#*:}

	return 0	
}

addnewip() {
	local validtime=0
	local currenttime

	# temperorly file 
	local INPUT1=$(mktemp /tmp/usb.XXXXXXXX)
	local INPUT2=$(mktemp /tmp/usb.XXXXXXXX)
	
	# menu output
	local OUTPUT=$(mktemp /tmp/output.XXXXXXX)

	# define local array
	local ar=()
	local newwhite=()

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $OUTPUT; exit" SIGHUP SIGINT SIGTERM
	
	# search based on ip address
	dialog --inputbox "Please enter ip address or hostname for search in log file" 8 80 2> $OUTPUT

	# save input variable
	ipadd=$(<$OUTPUT)

	# if user cancel the dialog
	if [ -z "$ipadd" ]
	then
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT
	
		return 0
	fi

	cat /var/log/usblock.log | grep "$ipadd" | tail | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' >$INPUT2
	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"
	while read n s ; do
	    ar+=($n "$s")
	done < $INPUT1
	dialog  --title "Founded devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${ar[@]}" 2> $OUTPUT

	NUM=$(<$OUTPUT)
	
	# if user chose cancel
	if [ "$NUM" = "" ]
	then 
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT

		return 0
	fi

	# pick log line
	newwhite=($(sed -n "$NUM p" $INPUT1))

	# check if host exist
	if [ -z "$(ls $CLIENTHOME | grep "^${newwhite[1]#*:}$")" ]
        then
                dialog --msgbox "This host is not exists.\nPlease add it in Add new host menu" 6 40
		
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT

		return 0
	fi

	# check if device added befor
	rule_exist ${newwhite[1]#*:} ${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:} && dialog --msgbox "Device already exist in whitelist" 5 38 && return 1

	# input comment
	dialog --inputbox "Write comment for this device" 8 80 "no comment" 2> $OUTPUT
	local comment=$(<$OUTPUT)

	# if user chose cancel
	if [ -z "$comment"  ]
	then 
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT

		return 0
	fi

	# input box for enter validation time in houre
	while true
	do
		dialog --inputbox "Please enter validation time in houre (enter 0 or leave blank for unlimite time)" 8 80 0 2> $OUTPUT
		validtime=$(<$OUTPUT)

		# if user chose cancel
		if [ -z "$validtime"  ]
		then 
			# remove temp files
			[ -f "$INPUT1" ] && rm $INPUT1
			[ -f "$INPUT2" ] && rm $INPUT2
			[ -f "$OUTPUT" ] && rm $OUTPUT
	
			return 0
		fi

		if [ "$validtime" = "0" ]
		then
			break
		elif [ ! -z "$(echo $validtime | grep '^[1-9][0-9]*$')" ]
		then
			currenttime=$(date +"%s")
			validtime=$(( $validtime * 60 * 60 + $currenttime ))
			break
		fi
	done


	# add new device to white list
	echo -e "# comment $comment \n# ${newwhite[1]} ${newwhite[2] } \n${newwhite[3]#*:} ${newwhite[4]#*:} ${newwhite[5]#*:}\n" >> $CLIENTHOME/${newwhite[1]#*:}/temp/$WDEVICE
		
	write_rule "$CLIENTHOME/${newwhite[1]#*:}"

	# remove temp file if exist
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$OUTPUT" ] && rm $OUTPUT
	
	[ "$develop" != 1 ] &&  puppet kick ${newwhite[1]#*:}

	return 0
}

addnewclass() {
	# temp file for dialog output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# choose between usb class
        /usr/bin/dialog --clear --backtitle "Usb lock main menu" \
        --title "[ List of USB Class ]" \
        --menu "Choose a class to add to whitelist" 13 60 6 \
	00h "Use class information in the Interface Descriptors" \
	01h "Audio"   \
	02h "Communications and CDC Control" \
	03h "HID (Human Interface Device)" \
	05h "Physical" \
	06h "Image" \
	07h "Printer" \
	08h "Mass Storage" \
	09h "Hub" \
	0Ah "CDC-Data" \
	0Bh "Smart Card" \
	0Dh "Content Security" \
	0Eh "Video" \
	0Fh "Personal Healthcare" \
	10h "Audio/Video Devices" \
	11h "Billboard Device Class" \
	12h "USB Type-C Bridge Class" \
	DCh "Diagnostic Device" \
	E0h "Wireless Controller" \
	EFh "Miscellaneous" \
	FEh "Application Specific" \
	FFh "Vendor Specific" 2> $OUTPUT
	
	# save menu output
	local class=$(cat $OUTPUT | tr -d 'h')

	if [ ! -z "$class" ]
	then
		# count number of host
		local hostsum=$(ls $CLIENTHOME | wc -l)
		((hostsum++))
	
		dialog --title "Choose host(s)" --checklist "Choose one/more/all host(s) to update whitelist" 10 60 $hostsum all hosts off $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} off " | tr -d "\n"; done) 2> $OUTPUT
	
		for i in $(<$OUTPUT)	
		do
			if [ "$i" == "all" ]
			then
				for j in $CLIENTHOME/*
				do
					def_rule_exist ${j##*/} $class && continue
					echo $class >> $j/temp/$WCLASS			
					write_rule "$j/"
				done
				break
			fi
			
			# if all not selected
			def_rule_exist $i $class && continue
			echo $class >> $CLIENTHOME/$i/temp/$WCLASS			
			write_rule $CLIENTHOME/$i
		done
	fi

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT
	
	[ "$develop" != 1 ] &&  puppet kick ${newwhite[1]#*:}

	return 0
}


showwhitedev() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $CLIENTHOME | wc -l)
	((hostsum++))

	dialog --title "Choose host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)
	
	# change unix time to normal time
	sed 's|\(^[1-9][0-9]*\)\( .*\)|date --date=@\1 +%Y/%m/%d-%H:%M"\2"|e' $CLIENTHOME/$hostid/temp/$WDEVICE | cat -s > $OUTPUT
	dialog --textbox $OUTPUT 10 80

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0
}

showwhiteclass() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $CLIENTHOME | wc -l)
	((hostsum++))

	dialog --title "Choose host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)

	dialog --textbox $CLIENTHOME/$hostid/temp/$WCLASS 10 80

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0
}

deldev() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $CLIENTHOME | wc -l)
	((hostsum++))

	# define array
	local ar=()

	dialog --title "Choose host" --menu "Choose a host to show whitelist" 10 60 $hostsum $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)
	local linenum=0

	if [ ! -z "$hostid" ]
	then
		while read line 
		do
		        if [ ! -z "$(echo $line | grep "^# comment" )" ]
		        then
				((linenum++))
		                comment=$line; count=1;
		                continue
		        elif [ "$count" = "1" ] && [ ! -z "$(echo $line | grep "^# From")" ]
		        then
		                device=$(echo $line | grep -o "Device:.*$")
		                ar+=($linenum "$comment $device")
		                count=0
		        fi
		done <$CLIENTHOME/$hostid/temp/$WDEVICE	
		
		if [ -z "${ar[@]}" ]
		then
			dialog --msgbox "There isnt any device in whitelist" 5 40
			# remove temp file
			[ -f "$OUTPUT" ] && rm $OUTPUT
	
			return 0
		fi

		dialog  --title "List of white list" --menu "Choose one for delete from whitelist" 10 80 5 "${ar[@]}" 2> $OUTPUT
	
		# save menu output
		local devicenum=$(<$OUTPUT)
	fi

	if [ ! -z "$devicenum" ]
	then
		echo "" > $OUTPUT
		linenum=0
	
		while read line
		do
			if [ ! -z "$(echo $line | grep "^# comment")" ]
			then
				ucomment=$line
				((linenum++))
			elif [ ! -z "$(echo $line | grep "^# From:")" ]
			then
				scomment=$line
			elif [ ! -z "$(echo $line | grep "^[0-9]" )" ]
			then
				if  [ "$linenum" != "$devicenum" ]
				then
					echo -e "$ucomment\n$scomment\n$line" >> $OUTPUT
				fi
			else
				echo $line >> $OUTPUT
			fi
		done < $CLIENTHOME/$hostid/temp/$WDEVICE
	
	 	cat -s $OUTPUT > $CLIENTHOME/$hostid/temp/$WDEVICE	
		dialog --msgbox "Device deleted from whitelist" 5 35

		# generate udev rule
		write_rule "$CLIENTHOME/$hostid/"
	
		# run puppet kick
		[ "$develop" != 1 ] && puppet kick $hostid
	fi

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT
	
	return 0
}

delclass() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# count number of host
	local hostsum=$(ls $CLIENTHOME | wc -l)
	((hostsum++))

	# define array
	local ar=()

	dialog --title "Choose host(s)" --menu "Choose one/more/all host(s) to show whitelist" 10 60 $hostsum $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

	# save menu output
	local hostid=$(<$OUTPUT)

	dialog --title "Choose host(s)" --menu "Choose a class for delete from whitelist" 10 60 5 $(cat -n $CLIENTHOME/$hostid/temp/$WCLASS) 2> $OUTPUT

	local linenumber=$(<$OUTPUT)
	local classnum=$(sed -n "$linenumber p" $CLIENTHOME/$hostid/temp/$WCLASS)
	if [ "$classnum" == "09" ]
	then
		dialog --title " Warning " --yesno "Delete \"09 Hub\" class, may cause disable all usb port. \nDo you realy want to delete?" 6 60
		local response=$?
		if [ "$response" == "0" ]
		then
			sed -i "$linenumber d" $CLIENTHOME/$hostid/temp/$WCLASS
		fi
	else
		sed -i "$linenumber d" $CLIENTHOME/$hostid/temp/$WCLASS
	fi

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	# generate udev rule
	write_rule "$CLIENTHOME/$hostid/"

	# run puppet kick
	[ "$develop" != 1 ] && puppet kick $hostid

	return 0

}

addnewhost() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# hostname variable
	local hostid

	dialog --inputbox "Enter new hostname FQDN (only use a-z and digits)" 10 60 2> $OUTPUT
	hostid=$(<$OUTPUT)

	# if user press cancel
	if [ -z "$hostid" ]
	then
		# remove temp file
		[ -f "$OUTPUT" ] && rm $OUTPUT
		
		return 0
	fi

	# validate hostname FQDN
	if [ -z "$(echo "$hostid" | egrep "^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9_-]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,})$")" ] 
	then
		dialog --msgbox "Entered hostname is invalid, please use valid format" 6 60
		
	elif [ ! -z "$(ls $CLIENTHOME | grep "^$hostid$")" ]
	then
		dialog --msgbox "This host is exists" 5 25
	else
		mkdir -p $CLIENTHOME/$hostid 
		cp -ar /etc/yasa/skell/* $CLIENTHOME/$hostid
		write_rule $CLIENTHOME/$hostid
		if [ -d "$CLIENTHOME/$hostid" -a -d "$CLIENTHOME/$hostid/temp" ]
		then
			dialog --msgbox "Host added successfully" 5 30
		fi
	fi

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	# run puppet kick
	[ "$develop" != 1 ] && puppet kick $hostid

	return 0

}

delhost() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# hostname variable
	local hostid
	

	# list all hosts
	dialog --title "Choose host(s) to delete from Yasa" --checklist "Choose one/more/all host(s) to delete from Yasa" 11 60 10 all hosts off $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} off " | tr -d "\n"; done) 2> $OUTPUT
	
	# if user press cancel
	if [ -z "$(cat $OUTPUT)" ]
	then 
	        # remove temp file
	        [ -f "$OUTPUT" ] && rm $OUTPUT

        	return 0
	fi

	dialog --title " Warning " --yesno "Do you realy want delete (a) host(s)?" 6 50
	local response=$?
        if [ "$response" == "1" ]
        then
                 # remove temp file
                 [ -f "$OUTPUT" ] && rm $OUTPUT

                 return 0
        fi

	for i in $(<$OUTPUT)	
		do
			# if all selected
			if [ "$i" == "all" ]
			then
				dialog --title " Warning " --yesno "After delete all hosts you cant manage any change on hosts. \nDo you realy want delete all hosts?" 7 60
		                local response=$?
		                if [ "$response" == "0" ]
		                then
					rm -r  $CLIENTHOME/* && dialog --msgbox "All hosts deleted successfuly." 5 40
		                fi
				break

			        # remove temp file
			        [ -f "$OUTPUT" ] && rm $OUTPUT
	
        			return 0

			fi
			
			# if all not selected
			rm -r $CLIENTHOME/$i
	done
	
	dialog --msgbox "Host(s) deleted successfuly." 5 40

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0
}

trigger_def() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	# hostname variable
	local hostid

        # count number of host
        local hostsum=$(ls $CLIENTHOME | wc -l)
        ((hostsum++))

	#dialog --title "Choose host(s)" --checklist "Choose one/more/all host(s) to update whitelist" 10 60 $hostsum all hosts off $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} off " | tr -d "\n"; done) 2> $OUTPUT
        dialog --title "Choose host(s)" --menu "Choose one host to active/deactive restrictions" 10 60 $hostsum $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $OUTPUT

        # save menu output
        local hostid=$(<$OUTPUT)

	if [ "$(cat $CLIENTHOME/$hostid/temp/$WDEF)" == "0" ]
	then
		sed -i 's/devpath 0/devpath 1/' $CLIENTHOME/$hostid/temp/90-footer
		echo "1" > $CLIENTHOME/$hostid/temp/$WDEF
		dialog --msgbox "USB Restrictions Deactivated" 5 40
	else
		sed -i 's/devpath 1/devpath 0/' $CLIENTHOME/$hostid/temp/90-footer
		echo "0" > $CLIENTHOME/$hostid/temp/$WDEF
		dialog --msgbox "USB Restrictions Activated" 5 40
	fi
	
        # generate udev rule
        write_rule "$CLIENTHOME/$hostid/"

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	# run puppet kick
	[ "$develop" != 1 ] && puppet kick $hostid
}

report_active() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	for i in $CLIENTHOME/*
	do 
		if [ "$(cat $i/temp/default)" == "0" ]
		then
			j=${i##*/} 
			echo "$j" >> $OUTPUT
		fi
	done
	dialog --textbox $OUTPUT 10 40	

	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0

}

report_deactive() {
	# temp file for menu output
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	for i in $CLIENTHOME/*
	do 
		if [ "$(cat $i/temp/default)" == "1" ]
		then
			j=${i##*/} 
			echo "$j" >> $OUTPUT
		fi
	done
	dialog --textbox $OUTPUT 10 40	
	
	# remove temp file
	[ -f "$OUTPUT" ] && rm $OUTPUT

	return 0

}

install_client_wizard() {
	# client connection information
	local hostname
	local username
	local password
	
	

}

yasacron() {
        # temperorly file 
        TEMP=$(mktemp /tmp/usb.XXXXXXXX)

        # trap and delete temp file
        trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM

	# save current time
	local currenttime=$(date +"%s")

	# variable for save dev.allow line
	local scomment
	local ucomment
	local line

	# remove dev allow rule based on expire time
	for host_dir in $CLIENTHOME/*
	do
		if [ -d "$host_dir" ]
		then
			while read line
			do
				if [ ! -z "$(echo $line | grep "^# comment")" ]
				then
					ucomment=$line
				elif [ ! -z "$(echo $line | grep "^# From:")" ]
				then
					scomment=$line
				elif [ ! -z "$(echo $line | grep "^[0-9]" )" ]
				then
					if [ ! -z "$(echo $line  | awk '($1 > value ) ' value=$currenttime)" ]
					then
						echo -e "$ucomment\n$scomment\n$line" >> $TEMP
					fi
				else
					echo $line >> $TEMP
				fi
			done < $host_dir/temp/$WDEVICE
			cp $TEMP $host_dir/temp/$WDEVICE
		else
			continue
		fi

		# write rule for each
		write_rule $host_dir

		# deploy rule for each host
		[ "$develop" != 1 ] && puppet kick $hostid
	done

	# remove class based on expire time
	# not implemented

	# remove temp file
	[ -f "$TEMP" ] && rm $TEMP

}

yasaauth() {
	local name=/sys$1
	local value=$2
	echo "$value" > "${name%/*}/authorized" 2>> /dev/null
	echo "${name%/*}/authorized" >> /var/log/yasa-auth.log
	return 0
}

client_mgmt_menu() {
	# Menu input
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXXX)
	
	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM
	
	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Client Management Menu" \
	        --title "[ C L I E N T - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 20 65 13 \
		1 "Add new host" \
		2 "Delete hosts" \
	        3 "Add new device based on last ten entry" \
	        4 "Add new device based on client IP address" \
		5 "Add new class to white list" \
		6 "Show device white list" \
		7 "Show class white list" \
		8 "Delete device from white list" \
		9 "Delete class from white list" \
		10 "Trigger state (allow all/deny all)" \
	        Exit "Return to Main Menu" 2>"${OUTPUT}"
	
	        local menuitem=$(<"${OUTPUT}")

		# if user enter cancel
		if [ -z "$menuitem" ]
		then
		        # remove temp file
		        [ -f "$OUTPUT" ] && rm $OUTPUT

			return 0
		fi

	        # make decision
	        case $menuitem in
			1) addnewhost;;
			2) delhost;;
	                3) addnew;;
	                4) addnewip;;
			5) addnewclass;;
			6) showwhitedev;;
			7) showwhiteclass;;
			8) deldev;;
			9) delclass;;
			10) trigger_def;;
	                Exit) echo "Bye"; break;;
	        esac
	

	done	
	return 0
}

group_mgmt_mene() {
	# Menu input
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXXX)
	
	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Group Management Menu" \
	        --title "[ GROUP - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 14 55 6 \
		1 "Add new group" \
		2 "Delete a group" \
		3 "Add/Remove host to/from group" \
		4 "Show member of group" \
		5 "Add device/class to group" \
	        Exit "Return to Main Menu" 2>"${OUTPUT}"
	
	        local menuitem=$(<"${OUTPUT}")

		# if user enter cancel
		if [ -z "$menuitem" ]
		then
		        # remove temp file
		        [ -f "$OUTPUT" ] && rm $OUTPUT

			return 0
		fi
	
	        # make decision
	        case $menuitem in
			1) group_add;;
			2) group_del;;
			3) group_addhost;;
			4) group_showmemebter;;
			5) group_add;;
	                Exit) break;;
	        esac
	

	done	
	return 0
}

report_menu() {
	# Menu input
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXXX)
	
	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Report Menu" \
	        --title "[ R E P O R T - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 12 55 6 \
		1 "Show active client" \
		2 "Show deactive client" \
	        Exit "Return to Main Menu" 2>"${OUTPUT}"
	
	        local menuitem=$(<"${OUTPUT}")

		# if user enter cancel
		if [ -z "$menuitem" ]
		then
		        # remove temp file
		        [ -f "$OUTPUT" ] && rm $OUTPUT

			return 0
		fi
	
	        # make decision
	        case $menuitem in
			1) report_active;;
			2) report_deactive;;
	                Exit) break;;
	        esac
	

	done	
	return 0
}

install_menu() {
	# Menu input
	local OUTPUT=$(mktemp /tmp/usb.XXXXXXXX)
	
	# trap and delete temp file
	trap "rm $OUTPUT; exit" SIGHUP SIGINT SIGTERM

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Install Menu" \
	        --title "[ I N S T A L L - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 12 55 6 \
		1 "Intall new client wizard" \
		2 "Prepare server installation" \
	        Exit "Return to Main Menu" 2>"${OUTPUT}"
	
	        local menuitem=$(<"${OUTPUT}")

		# if user enter cancel
		if [ -z "$menuitem" ]
		then
		        # remove temp file
		        [ -f "$OUTPUT" ] && rm $OUTPUT

			return 0
		fi
	
	        # make decision
	        case $menuitem in
			1) install_client_wizard;;
			2) report_deactive;;
	                Exit) break;;
	        esac
	

	done	
	return 0

	echo "N"
}

# Non-interactive mod
if [ ! -z "$1" ]
then
	if [ "$1" = "cron" ]
	then
		yasacron
	elif [ "$1" = "auth" ]
	then
		yasaauth $2 $3
	fi

# Interactive mod
else
	# Menu input
	MAININPUT=$(mktemp /tmp/usb.XXXXXXXX)
	
	# trap and delete temp file
	trap "rm $MAININPUT; exit" SIGHUP SIGINT SIGTERM
	
	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Usb lock main menu" \
	        --title "[ M A I N - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-4 to choose an option.\
	        Choose the TASK" 15 65 5 \
		1 "Client Management" \
		2 "Group Management" \
	        3 "Reports" \
	        4 "Installation Client and Server" \
	        Exit "Exit and Logout" 2>"${MAININPUT}"
	
	        menuitem=$(<"${MAININPUT}")
	
		if [ -z "$menuitem" ]
		then
		        # remove temp file
		        [ -f "$MAININPUT" ] && rm $MAININPUT

			exit 0
		fi


	        # make decision
	        case $menuitem in
			1) client_mgmt_menu;;
			2) group_mgmt_menue;;
	                3) report_menu;;
	                4) install_menu;;
	                Exit) echo "Bye"; break;;
	        esac
	done
fi
	
[ -f "$MAININPUT" ] && rm $MAININPUT 

exit 0
