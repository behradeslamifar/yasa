#!/bin/bash

# This script is based on IOI organization request for control on USB connections 
# and devices. 
# Copyright (C) 2016 Behrad Eslamifar <b.eslamifar@cvak.ir> and IOI
# This is properitary software and cant freely distributed.

# Disable ctrl+c in program
trap "" SIGINT

# Load default configuration
source /etc/default/yasa


group_modify_class() { 
	# temp file for dialog output
	local output=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# local variable
	# $1 -> host,group , $2 -> hostid,groupid
	local type=$1
	local id=$2
	local classid
	local home

	# set home
	if [ "$type" == "host" ]
	then
		home=$CLIENTHOME
	else
		home=$GRPHOME
	fi

	# choose between usb class
        /usr/bin/dialog --backtitle "Usb lock main menu" \
        --title "[ List of USB Class ]" \
        --checklist "Choose a class to add to whitelist" 13 60 22 \
	00h "Use class information in the Interface Descriptors" off \
	01h "Audio" off \
	02h "Communications and CDC Control" off \
	03h "HID (Human Interface Device)" on \
	05h "Physical" off \
	06h "Image" off \
	07h "Printer" off \
	08h "Mass Storage" off \
	09h "Hub" on \
	0Ah "CDC-Data" off \
	0Bh "Smart Card" off \
	0Dh "Content Security" off \
	0Eh "Video" off \
	0Fh "Personal Healthcare" off \
	10h "Audio/Video Devices" off \
	11h "Billboard Device Class" off \
	12h "USB Type-C Bridge Class" off \
	DCh "Diagnostic Device" off \
	E0h "Wireless Controller" off \
	EFh "Miscellaneous" off \
	FEh "Application Specific" off \
	FFh "Vendor Specific" off 2> $output

	# save dialog state (find if user press cancel)
	response=$?

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then
		[ -f "$output" ] && rm $output
	
		return 1
	fi

	# start with fresh class file
	echo "" > $home/$id/temp/$WCLASS

	for classid in $(<$output)
	do
		classid=$(echo $classid | tr -d 'h')
		echo $classid >> $home/$id/temp/$WCLASS 	
	done

	# remove temp file
	[ -f "$output" ] && rm $output

	return 0

}

group_device_existence_check() {
	local groupid="$1"
        local vendorid="$2"
        local productid="$3"
        local serial="$4"

	# return 1 if device not added 
	[ -z $(grep ".*$vendorid.*$productid.*$serial.*" $GRPHOME/$groupid/$WDEVICE | cut -f 1 -d " ") ] && return 1

	# return 0 if device already exist 
	return 0


}

group_modify_dev() {
	# local variables
	local validtime=0
	local currenttime
	local groupid=$1
	local keyword
	local response
	local log_line_number

	# define local array
	local log_line_array=()
	local log_line=()

	# temperorly file 
	local INPUT1=$(mktemp /tmp/usb.XXXXXXXX)
	local INPUT2=$(mktemp /tmp/usb.XXXXXXXX)
	
	# menu output
	local output=$(mktemp /tmp/output.XXXXXXX)

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $output; exit" SIGHUP SIGINT SIGTERM
	
	while true
	do
	    # search based on ip address
	    dialog --inputbox "Please search the keywork to find your device (ip|hostname|device)" 8 80 2> $output

	    # save dialog state (find if user press cancel)
	    response=$?

	    # save input variable
	    keyword=$(<$output)

	    # if user cancel the dialog or press escape 
	    if [ "$response" == "1" -o "$response" == "255" ]
	    then
	    	[ -f "$INPUT1" ] && rm $INPUT1
	    	[ -f "$INPUT2" ] && rm $INPUT2
	    	[ -f "$output" ] && rm $output
	    
	    	return 1
	    fi

	    # normalize log file
	    cat $DEVICELOG | grep -i "$keyword" | tail | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' > "$INPUT2"

	    if [ ! -z "$(<$INPUT2)" ]
	    then
		break
	    fi
	done

	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"

	while read n s ; do
	    log_line_array+=($n "$s")
	done < $INPUT1

	dialog  --title "Founded devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${log_line_array[@]}" 2> $output

	# get reponse
	response=$?

	# get data stored in $output
	log_line_number=$(<$output)
	
	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$output" ] && rm $output

		return 1
	fi

	# pick log line
	log_line=($(sed -n "$log_line_number p" $INPUT1))

	# check if device added befor
	group_device_existence_check ${log_line[1]#*:} ${log_line[3]#*:} ${log_line[4]#*:} ${log_line[5]#*:} && dialog --msgbox "Device already exist in whitelist" 5 38 && return 1

	# input comment
	dialog --inputbox "Write comment for this device" 8 80 "no comment" 2> $output
	local comment=$(<$output)

	# get response
	response=$?

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp files
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$output" ] && rm $output

		return 1
	fi

	# input box for enter validation time in houre
	while true
	do
		dialog --inputbox "Please enter validation time in houre (enter 0 or leave blank for unlimite time)" 8 80 0 2> $output
		validtime=$(<$output)

		# get response
		response=$?

		# if user cancel the dialog or press escape 
		if [ "$response" == "1" -o "$response" == "255" ]
		then 
			# remove temp files
			[ -f "$INPUT1" ] && rm $INPUT1
			[ -f "$INPUT2" ] && rm $INPUT2
			[ -f "$output" ] && rm $output
	
			return 1
		fi

		if [ "$validtime" = "0" ]
		then
			break
		elif [ ! -z "$(echo $validtime | grep '^[1-9][0-9]*$')" ]
		then
			currenttime=$(date +"%s")
			validtime=$(( $validtime * 60 * 60 + $currenttime ))
			break
		fi
	done


	# add new device to white list
	echo -e "# comment $comment \n# ${log_line[1]} ${log_line[2] } \n${log_line[3]#*:} ${log_line[4]#*:} ${log_line[5]#*:}\n" >> $GRPHOME/$groupid/$WDEVICE
		
	# remove temp file if exist
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$output" ] && rm $output
	
	return 0
}

group_udev_gen() {
    # temperorly file 
    TEMP=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM
    
    local groupid="$1"
    local grouppath="$GRPHOME/$groupid"

	echo "" > "$grouppath/25-default-whitelist"
	cat "$grouppath/$WCLASS" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$grouppath/25-default-whitelist"
	done
	
	echo "" > "$grouppath/20-whitelist"
        cat "$grouppath/$WDEVICE" | grep -v "^#\|^$" > $TEMP
	
	while read validtime vid pid serial 
	do
	        if [ -z "$serial" -a -z "$pid" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ENV{valid}=\"1\""  >> "$grouppath/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ENV{valid}=\"2\""  >> "$grouppath/20-whitelist"
		elif [ -z "$serial" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$grouppath/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$grouppath/20-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$grouppath/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$grouppath/20-whitelist"
	        fi
	done < $TEMP
	
	for I in $grouppath/[0-9]*
	do
		if [ ! -z "$(echo $I | grep '10-header$')" ]
		then
			cat $I > "$grouppath/etc/10-usblock.rules"
		else 
			cat $I >> "$grouppath/etc/10-usblock.rules"
		fi
	done

	#remove temp file
	[ -f "$TEMP" ] && rm $TEMP

	return 0

}


group_modify_rule() {
	# temp file for menu output
	local output=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM


        # count number of host
        local groupsum=$(ls $GRPHOME | wc -l)

	if [ -z "$1" ]
	then
		local interactive=1
	else
		local interactive=0
		local groupid=$1
	fi

	while true
	do
	   if [ "$interactive" == "1" ]
	   then
		# choose group to modify
		dialog --title "Group List" --menu "Choose one group to modify" 10 60 $groupsum $(for i in $(ls $GRPHOME/); do echo "$i ${i%%.*} " | tr -d "\n"; done) 2> $output
	
		# get response
		response=$?

		# save dialog output in variable
		local groupid=$(<$output)
		
		# if user cancel the dialog or press escape 
		if [ "$response" == "1" -o "$response" == "255" ]
		then 
			# remove temp file
			[ -f "$output" ] && rm $output
			
			return 1
		fi
	
	   fi
	   
	   # modify class
	   group_modify_class $groupid

	   # if press cancel remove group folder
	   response=$?

	   if [ "$response" == "1" ]
	   then
	   	[ -f "$output" ] && rm $output
	   	return 1
	   fi

	   # Modify device whitelist
	   while true
	   do
	   	# modify device that allow in group
	   	group_modify_dev $groupid

	   	# if press cancel remove group folder
	   	response=$?

	   	if [ "$response" == "1" ]
	   	then
	   		break
	   	fi
		
		# add another device
		dialog --backtitle "Group Management" --title " Another Device " --yesno "Do you add another device to whitelist?" 6 50
		
		# get response
		response=$?

		if [ "$response" == "0" ]
		then
			continue
		else
			break
		fi
	   done

	   # create udev rule
	   group_udev_gen $groupid

	   # if press cancel remove group folder
	   response=$?

	   if [ "$response" == "1" ]
	   then
	   	[ -f "$output" ] && rm $output
	   	return 1
	   fi

	   # break while if noninteractive
           if [ "$interactive" == "0" ]
           then
		break
	   fi
 
	done

        # remove temp file
        [ -f "$output" ] && rm $output

        return 0

}

group_find_member() {
	# define local variable
	local groupid="$1"
	local hostid="$2"

	group_member=$(ls $CLIENTHOME/$hostid/temp/grp.* 2>/dev/null | grep "\<$groupid\>")
	if [ ! -z "$group_member" ]
	then 
		echo "on"
	else
		echo "off"
	fi

	return 0
}

host_write_rule() { 
    # temperorly file 
    TEMP=$(mktemp /tmp/usb.XXXXXXXX)
    
    # trap and delete temp file
    trap "rm $TEMP; exit" SIGHUP SIGINT SIGTERM
    
    local hostid="$1"
    local hostpath="$CLIENTHOME/$hostid"
    local groupid

    if [ -e $hostpath/temp/grp.* ]
    then
	groupid=$(ls $hostpath/temp/grp.*)
	groupid=${groupid##*.}
	cp $GRPHOME/$groupid/etc/10-usblock.rules $CLIENTHOME/$hostid/etc/
    
    else
	echo "" > "$hostpath/temp/25-default-whitelist"
	cat "$hostpath/temp/$WCLASS" | grep -v "^#\|^$" | while read line; do
                echo "ATTR{bInterfaceClass}==\"$line\", ENV{valid}=\"2\""  >> "$hostpath/temp/25-default-whitelist"
	done
	
	echo "" > "$hostpath/temp/20-whitelist"
        cat "$hostpath/temp/$WDEVICE" | grep -v "^#\|^$" > $TEMP
	
	while read validtime vid pid serial 
	do
	        if [ -z "$serial" -a -z "$pid" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ENV{valid}=\"1\""  >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ENV{valid}=\"2\""  >> "$hostpath/temp/20-whitelist"
		elif [ -z "$serial" ]
		then
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ENV{valid}=\"1\""  >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ENV{valid}=\"2\""  >> "$hostpath/temp/20-whitelist"
	        else
	                echo "ATTR{idVendor}==\"$vid\", ATTR{idProduct}==\"$pid\", ATTR{serial}==\"$serial\", ENV{valid}=\"1\"" >> "$hostpath/temp/20-whitelist"
	                echo "ATTRS{idVendor}==\"$vid\", ATTRS{idProduct}==\"$pid\", ATTRS{serial}==\"$serial\", ENV{valid}=\"2\"" >> "$hostpath/temp/20-whitelist"
	        fi
	done < $TEMP
	
	for I in $hostpath/temp/[0-9]*
	do
		if [ ! -z "$(echo $I | grep '10-header$')" ]
		then
			cat $I > "$hostpath/etc/10-usblock.rules"
		else 
			cat $I >> "$hostpath/etc/10-usblock.rules"
		fi
	done
    fi

	#remove temp file
	[ -f "$TEMP" ] && rm $TEMP

	return 0
}

host_deploy_config() { 
	local hostid="$1"
	local mod=$2
	local result

	if [ "$DEVELOP" == "0" ] 
	then
		puppet kick $hostid >/dev/null 2>&1
		result=$?
		
		if [ "$result" != "0" ]
		then
			[ "$mod" != "silent" ] && dialog --msgbox "$hostid deployment failed." 6 50	
			echo "$hostid"	
			
			return 1
		fi
	fi
	
	return 0
}

group_modify_member() {
	# temp file for menu output
	local output=$(mktemp /tmp/usb.XXXXXXX)
	local oldmemberlist=$(mktemp /tmp/usb.XXXXXXX)
	local failedhost=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output $oldmemberlist; exit" SIGHUP SIGINT SIGTERM

	# local variable
	local groupid
	local hostid
	local groupsum
	local hostsum
	local groupfilepath
	local response

	# if function had argument
	if [ ! -z "$1"	]
	then
		groupid="$1"
	else
	        # count number of group
	        groupsum=$(ls $GRPHOME | wc -l)
	
	        # choose group to modify
	        dialog --title "Group List" --menu "Choose one group to add/remove member" 10 60 $groupsum $(for i in $(ls $GRPHOME/); do echo "$i ${i%%.*} " | tr -d "\n"; done) 2> $output
	
	        local groupid=$(<$output)
	
	        # if user select cancel
	        if [ -z "$groupid" ]
	        then
	                # remove temp file
	                [ -f "$output" ] && rm $output
		        [ -f "$oldmemberlist" ] && rm $oldmemberlist
	
	                return 1
	        fi
	fi

	hostsum=$(ls $CLIENHOME | wc -l)

        # choose hosts to add to group
        dialog --title "Choose host(s)" --checklist "Choose one/more host(s) for add to group" 10 60 $hostsum $(for i in $(ls $CLIENTHOME/); do echo "$i ${i%%.*} $(group_find_member $groupid $i) " | tr -d "\n"; done) 2> $output

	# get response
	response=$?

        # if user press cancel
        if [ "$response" == "1" -o "$response" == "255" ]
        then
                # remove temp file
                [ -f "$output" ] && rm $output
        	[ -f "$oldmemberlist" ] && rm $oldmemberlist

                return 1
        fi

	# remove all old member
	find $CLIENTHOME -type f -name "grp.$groupid" -exec sh -c "echo -n '{} ' >> $oldmemberlist" \;

	[ ! -z "$(<$output)" ] && for hostid in $(<$output)
	do
		rm $CLIENTHOME/$hostid/temp/grp.* 2> /dev/null
		touch $CLIENTHOME/$hostid/temp/grp.$groupid

		# remove from old list
		groupfilepath=$CLIENTHOME/$hostid/temp/grp.$groupid
		sed -i 's_'"$groupfilepath"'__' $oldmemberlist

		[ ! -z "$hostid" ] && host_write_rule $hostid
	done

	[ ! -z "$(<$output)" ] && for hostid in $(<$output)
	do
		if [ ! -z "$hostid" ] 
		then
			host_deploy_config $hostid silent >> $failedhost                                                                         
		fi
	done

	# Remove old member from group
	[ ! -z "$(<$oldmemberlist)" ] && for I in $(<$oldmemberlist)
	do
		hostid=$(echo $I |  sed "s_$CLIENTHOME/\(.*\)/temp/grp.*_\1_")
		rm -r $CLIENTHOME/$hostid/temp/grp.* 2> /dev/null
		[ ! -z "$hostid" ] && host_write_rule $hostid
	done

	# Deploy new config for removed member
	for I in $(<$oldmemberlist)
	do
		hostid=$(echo $I |  sed "s_$CLIENTHOME/\(.*\)/temp/grp.*_\1_")
		if [ ! -z "$hostid" ] 
		then
			host_deploy_config $hostid silent >> $failedhost
		fi
	done

        if [ -z "$(<$failedhost)" ]    
        then
                echo "Client configuration deployment Process successfuly done." > $failedhost
                dialog --backtitle "Group Management" --title "Client Deployment" --textbox $failedhost 10 80
        else
                dialog --backtitle "Group Management" --title "Failed Host(s)" --textbox $failedhost 10 80
        fi


        # remove temp file
        [ -f "$output" ] && rm $output
        [ -f "$oldmemberlist" ] && rm $oldmemberlist

        return 0
		
       for hostid in $(<$output)       
        do
            if [ "$hostid" == all ]        
            then              
                for hostid in $(ls $CLIENTHOME)
                do            
                    host_write_rule $hostid        
                    host_deploy_config $hostid silent >> $failedhost                                                                         
                done
                break         
            fi
            host_write_rule $hostid        
            host_deploy_config $hostid silent >> $failedhost                                                                                 
        done

}

group_modify() {
	# temp file for menu output
	local output=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# group name variable
	local groupid
	local groupsum

	# show list of groups
	# count number of group
	groupsum=$(ls $GRPHOME | wc -l)
	
	# if no any group 
	if [ "$groupsum" == "0" ] 
	then
		dialog --backtitle "Group Management" --title "Modify Group" --msgbox "No Groups" 6 30

		return 1
	fi

        # choose group to modify
        dialog --backtitle "Group Management" --title "Group List" --menu "Choose one group to modify" 10 60 $groupsum $(for i in $(ls $GRPHOME/); do echo "$i ${i%%.*} " | tr -d "\n"; done) 2> $output

	# get response
	response=$?

	# save dialog output in variable
	groupid=$(<$output)
	
	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp file
		[ -f "$output" ] && rm $output
		
		return 1
	fi
	
	# modify group
	group_modify_rule $groupid

	# if press cancel remove group folder
	response=$?

	if [ "$response" == "1" ]
	then
		rm -r $GRPHOME/$groupid
		[ -f "$output" ] && rm $output
		return 1
	fi

	# modify member
	group_modify_member $groupid

	# if press cancel remove group folder
	response=$?

	if [ "$response" == "1" ]
	then
		rm -r $GRPHOME/$groupid
		[ -f "$output" ] && rm $output
		return 1
	fi

	# remove temp file
	[ -f "$output" ] && rm $output
				
	return 0
}

group_add() {
	# temp file for menu output
	local output=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# group name variable
	local groupid
	local response
	
	while true
	do
		dialog --inputbox "Enter name of new group\nName must be 3 character at least\nOnly use Lowercase Alphabet and Digits" 10 50 2> $output

		# get response
		response=$?

		# save dialog output in variable
		groupid=$(<$output)
		
		# if user cancel the dialog or press escape 
		if [ "$response" == "1" -o "$response" == "255" ]
		then 
			# remove temp file
			[ -f "$output" ] && rm $output
			
			return 1
		fi
	
		# validate group name 
		if [ -z "$(echo "$groupid" | egrep "[a-z0-9]{3,}")" ] 
		then
			dialog --msgbox "Group name not accepted, please use valid format." 6 60
		elif [ ! -z "$(ls $GRPHOME | grep "^${groupid}$")" ]
	        then
	                dialog --msgbox "This Group already exists.\nPlease choose another name or use\nmodify group menu for add member" 7 40
		else 
			mkdir $GRPHOME/$groupid
			cp -ar $TEMPHOME/group/* $GRPHOME/$groupid
		
			break
		fi
	done

	# modify group
	group_modify_rule $groupid

	# if press cancel remove group folder
	response=$?

	if [ "$response" == "1" ]
	then
		rm -r $GRPHOME/$groupid
		[ -f "$output" ] && rm $output
		dialog --backtitle "Group Management" --title "Adding Group Failed !"  --msgbox "Adding group failed during error or user cancelation." 5 60
		return 1
	fi

	# modify member
	group_modify_member $groupid

	# if press cancel remove group folder
	response=$?

	if [ "$response" == "1" ]
	then
		rm -r $GRPHOME/$groupid
		[ -f "$output" ] && rm $output
		dialog --backtitle "Group Management" --title "Adding Group Failed !"  --msgbox "Adding group failed during error or user cancelation." 5 60
		return 1
	fi

	dialog --backtitle "Group Management" --msgbox "Group added successfully." 5 30

	# remove temp file
	[ -f "$output" ] && rm $output
				
	return 0
}

group_del() {
	# wish list
	# featur 1: add soft delete
	# temp variables
	local output=$(mktemp /tmp/usb.XXXXXXX)
	local oldmemberlist=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output $oldmemberlist; exit" SIGHUP SIGINT SIGTERM

	# local variable
	local groupid
	local hostid
	local groupsum
	local response

	# choose group from list
	# if function had argument
	if [ ! -z "$1"	]
	then
		groupid="$1"
	else
	        # count number of group
	        groupsum=$(ls $GRPHOME | wc -l)
	
		# back to ment if not any group
		if [ "$groupsum" == "0" ]
		then
			echo "Not any group exist yet." > $output
			dialog --backtitle "Group Management" --title "Delete Group Memeber(s)" --textbox $output 5 50

			# remove temp file
			[ -f "$output" ] && rm $output
        		[ -f "$oldmemberlist" ] && rm $oldmemberlist

			return 1
		fi

	        # choose group to modify
	        dialog --backtitle "Group Management" --title "Group List" --menu "Choose one group to add/remove member" 10 60 $groupsum $(for i in $(ls $GRPHOME/); do echo "$i ${i%%.*} " | tr -d "\n"; done) 2> $output
	
		# get response
		response=$?

	        local groupid=$(<$output)
	
		# if user cancel the dialog or press escape 
		if [ "$response" == "1" -o "$response" == "255" ]
		then 
			# remove temp file
			[ -f "$output" ] && rm $output
        		[ -f "$oldmemberlist" ] && rm $oldmemberlist
			
			return 1
		fi

	fi

	# are you sure
	dialog --backtitle "Group Management" --title " Warning " --yesno "Do you realy want to delete?\nThis task cant recover after progress" 6 50
	# get response
	response=$?

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp file
		[ -f "$output" ] && rm $output
        	[ -f "$oldmemberlist" ] && rm $oldmemberlist
		
		return 1
	fi

	# remove member from group (progress 25%)
	echo 25 | dialog --backtitle "Group Management" --gauge "Remove $groupid members" 7 70 0
	find $CLIENTHOME -type f -name "grp.$groupid" -exec sh -c "echo -n '{} ' >> $oldmemberlist" \;
	for I in $(<$oldmemberlist)
	do
		rm -r $I
	done
	sleep 1
	
	# add default host rule to hosts (progress 50%)
	echo 50 | dialog --backtitle "Group Management" --gauge "Recovering hosts rules" 7 70 0
	for I in $(<$oldmemberlist)
	do
		
		hostid=$(echo $I |  sed "s_$CLIENTHOME/\(.*\)/temp/grp.*_\1_")
		[ ! -z "$hostid"] && host_write_rule $hostid
	done
	sleep 1


	# deploy rule to removed host (progress 75%)
	echo 75 | dialog --backtitle "Group Management" --gauge "Deploy new rule to hosts" 7 70 0
	for I in $(<$oldmemberlist)
	do
		hostid=$(echo $i |  sed "s_$CLIENTHOME/\(.*\)/temp/grp.*_\1_")
		[ ! -z "$hostid" ] && host_deploy_config $hostid
	done
	sleep 1

	# remove group folder (progress 90%)
	echo 90 | dialog --backtitle "Group Management" --gauge "Remove $groupid files" 7 70 0
	rm -r $GRPHOME/$groupid
	sleep 1

	# progress 100%
	echo 100 | dialog --backtitle "Group Management" --gauge "Remove $groupid files" 7 70 0
	sleep 1

	dialog --msgbox "$groupid removed successfuly" 6 45

        # remove temp file
        [ -f "$output" ] && rm $output
        [ -f "$oldmemberlist" ] && rm $oldmemberlist

        return 0
	
}

group_show() {
	# temp file for menu output
	local output=$(mktemp /tmp/usb.XXXXXXX)

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# local variable
	local response
	local groupid
	local groupsum

	while true
	do
		# show list of groups
	        # count number of group
	        groupsum=$(ls $GRPHOME | wc -l)
		
		# if no groups
		if [ "$groupsum" == "0" ] 
		then
			dialog --backtitle "Group Management" --title "Modify Group" --msgbox "No Groups" 6 30

			return 1
		fi

	        # choose group to modify
	        dialog --backtitle "Group Management" --title "Group List" --menu "Choose a group. Press cancel to exit and Esc to start again" 10 60 $groupsum $(for i in $(ls $GRPHOME/); do echo "$i $i " | tr -d "\n"; done) 2> $output
	
		# get response
		response=$?

	        local groupid=$(<$output)
		
		# if user cancel the dialog or press escape 
		if [ "$response" == "1" ]
		then 
			# remove temp file
			[ -f "$output" ] && rm $output
			
			return 1
		elif [ "$response" == "255" ] 
		then 
			continue
		fi

		# show member in text box
find $CLIENTHOME -name "grp.$groupid" | sed "s_$CLIENTHOME/\(.*\)/temp/grp.*_\1_" > $output

		dialog --backtitle "Group Management" --title "Group Member(s)" --textbox $output 10 80

		if [ "$response" == "255" ]
		then
			continue
		fi

		# show class
		# Convert to human readable text
		sed -e 's/00/00h Use class information in the Interface Descriptors/' \
		        -e 's/00/00h Use class information in the Interface Descriptors/' \
		        -e 's/01/01h Audio/' \
		        -e 's/02/02h Communications and CDC Control/' \
		        -e 's/03/03h HID (Human Interface Device)/' \
		        -e 's/05/05h Physical/' \
		        -e 's/06/06h Image/' \
		        -e 's/07/07h Printer/' \
		        -e 's/08/08h Mass Storage/' \
		        -e 's/09/09h Hub/' \
		        -e 's/0A/0Ah CDC-Data/' \
		        -e 's/0B/0Bh Smart Card/' \
		        -e 's/0D/0Dh Content Security/' \
		        -e 's/0E/0Eh Video/' \
		        -e 's/0F/0Fh Personal Healthcare/' \
		        -e 's/10/10h Audio\/Video Devices/' \
		        -e 's/11/11h Billboard Device Class/' \
		        -e 's/12/12h USB Type-C Bridge Class/' \
		        -e 's/DC/DCh Diagnostic Device/' \
		        -e 's/E0/E0h Wireless Controller/' \
		        -e 's/EF/EFh Miscellaneous/' \
		        -e 's/FF/FEh Application Specific/' \
		        -e 's/FF/FFh Vendor Specific/'  $GRPHOME/$groupid/$WCLASS | \
							grep -v "^$" > $output
		if [ -z "$(<$output)" ]
		then
			echo "There is not exist any class in white list" > $output
		fi
		dialog --backtitle "Group Management" --title "Whitelist Class" --textbox $output 10 80

		# get response
		response=$?

		if  [ "$response" == "255" ]
		then
			continue
		fi
	
		# show device rule
		# change unix time to normal time
		sed 's|\(^[1-9][0-9]*\)\( .*\)|date --date=@\1 +%Y/%m/%d-%H:%M"\2"|e' $GRPHOME/$groupid/$WDEVICE | cat -s > $output
		if [ -z "$(<$output)" ]
		then
			echo "There is not exist any device in white list" > $output
		fi

		dialog --backtitle "Group Management" --title "White List Device(s)" --textbox $output 10 80

		# get response
		response=$?

		if [ "$response" == "1" ]
		then
			break
		elif [ "$response" == "255" ]
		then
			continue
		fi

	done

	# remove temp file
	[ -f "$output" ] && rm $output
				
	return 0

}

# Host Management Functions
host_puppet_entry() {
	## This is function is only find hostname from puppet cert list and back 
	## it to host_add function.
	## It not run validation or not save anything.

	local __hostid
	local __hostidvar=$1
	local response
	local output=$(mktemp /tmp/output.XXXXXXX) 

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# progress bar till calculate host number
	echo 30 | dialog --backtitle "Client Management" --gauge "Calculate number of ready hosts ..." 7 70 0
	##test
        local hostsum=$(puppet cert list --all | wc -l)

	# check if any hostname wait for sign
        if [ "$hostsum" == "0" ]       
        then
                echo "Not any client exist in waiting list" > $output
                dialog --backtitle "Client Management" --title "Accept New Client" --textbox $output 5 50

		# remove temp file
                [ -f "$output" ] && rm $output

                return 1      
        fi

	# progress bar till find hostnames
	echo 70 | dialog --backtitle "Client Management" --gauge "Wait till hostnames list be ready ..." 7 70 0

	##test
        dialog --backtitle "Client Management" --title "Choose host" --menu "Choose one host to sign and add to Yasa" 10 60 $hostsum $(for i in $(puppet cert list --all | tr -s ' ' | sed 's/^\(+ \| \)\"/\"/' | cut -f 1 -d " " | tr -d '"'); do echo "$i ${i%%.*} " | tr -d "\n"; done) 2> $output

	# get reponse
	response=$?

	# get hostid
	__hostid=$(<$output)

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" -o -z "$(<$output)" ]
	then 
		# remove temp file
		[ -f "$output" ] && rm $output
		
		return 1
	fi

	# set hostid variable for output
	eval "$__hostidvar"="'$__hostid'"

	# remove temp file
	[ -f "$output" ] && rm $output
	
	return 0
}

host_log_entry() {
	local validtime=0
	local currenttime
	local keyword
	local response
	local __hostidvar=$1
	local __hostid

	# temperorly file 
	local INPUT1=$(mktemp /tmp/usb.XXXXXXXX)
	local INPUT2=$(mktemp /tmp/usb.XXXXXXXX)
	
	# menu output
	local OUTPUT=$(mktemp /tmp/output.XXXXXXX)

	# define local array
	local ar=()
	local newwhite=()

	# trap and delete temp file
	trap "rm $INPUT1 $INPUT2 $OUTPUT; exit" SIGHUP SIGINT SIGTERM
	

	# search based on keyword
	dialog --backtitle "Client Management" --title "S E A R C H B O X" --inputbox "Please enter keyword to search in Yasa log file" 8 70 2> $OUTPUT

	# get response
	reponse=$?

	# save input variable
	keyword=$(<$OUTPUT)

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp file
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT
		
		return 1
	fi
	
	cat $DEVICELOG | grep -i "$keyword" | tail | tac | cat -n | expand  | tr -s ' ' | sed 's/ //' >$INPUT2
	cat "$INPUT2" | cut -f 1,3,5,6,7,8 -d " " > "$INPUT1"
	while read n s ; do
	    ar+=($n "$s")
	done < $INPUT1
	dialog  --title "Founded devices" --menu "Your choozen device will be add to whitelist" 0 80 5 "${ar[@]}" 2> $OUTPUT

	# get response
	reponse=$?

	NUM=$(<$OUTPUT)

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp file
		[ -f "$INPUT1" ] && rm $INPUT1
		[ -f "$INPUT2" ] && rm $INPUT2
		[ -f "$OUTPUT" ] && rm $OUTPUT
		
		return 1
	fi

	# pick log line
	newwhite=($(sed -n "$NUM p" $INPUT1))

	# get hostid
	__hostid=${newwhite[1]#*:}

	# send hostid to parent variable
	eval "$__hostidvar"="'$__hostid'"

	# remove temp files
	[ -f "$INPUT1" ] && rm $INPUT1
	[ -f "$INPUT2" ] && rm $INPUT2
	[ -f "$OUTPUT" ] && rm $OUTPUT
	
	return 1

}

host_manual_entry() {
	## This is function is only get hostname from user and pass it to host_add function
	## It not run validation or not save anything

	local __hostid
	local __hostidvar=$1
	local response
	local output=$(mktemp /tmp/output.XXXXXXX) 
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

	# get hostid from user
	dialog --backtitle "Client Management" --title "I N P U T B O X" --inputbox "Please enter valid hostname." 8 70 2>"$output"

	# get reponse
	response=$?

	# get hostid
	__hostid=$(<$output)

	# if user cancel the dialog or press escape 
	if [ "$response" == "1" -o "$response" == "255" ]
	then 
		# remove temp file
		[ -f "$output" ] && rm $output
		
		return 1
	fi
	
	# set hostid variable for output
	eval "$__hostidvar"="'$__hostid'"

	# remove temp file
	[ -f "$output" ] && rm $output
	
	return 0
}
	
host_disable_yasa() {
	# Disable disable USB port in udev config. This function have many return value
	# 0 If all task done successfuly
	# 1 If host_deploy_config failed
	# 2 If found an error in pregeneration temp file

	local hostid=$1
	local response

	if [ "$(cat $CLIENTHOME/$hostid/temp/$WDEF)" == "0" ]
	then
	        sed -i 's/devpath 0/devpath 1/' $CLIENTHOME/$hostid/temp/90-footer
	        echo "1" > $CLIENTHOME/$hostid/temp/$WDEF
	elif [ "$(cat $CLIENTHOME/$hostid/temp/$WDEF)" == "1" ] 
	then
		echo "Do nothing" >/dev/null
	else
		dialog --backtitle "Client Management" --title "Error Message" --msgbox "Found an error in configuration files." 6 60
		return 2
	fi

	host_deploy_config $hostid silent
	
	# get response
	response=$?
	
	if [ "$response" == "1" ]
	then
		return 1
	fi		

	return 0
}

host_enable_yasa() {
	# Enable USB port in udev config. This function have many return value
	# 0 If all task done successfuly
	# 1 If host_deploy_config failed
	# 2 If found an error in pregeneration temp file

	local hostid=$1
	local response

	if [ "$(cat $CLIENTHOME/$hostid/temp/$WDEF)" == "1" ]
	then
	        sed -i 's/devpath 1/devpath 0/' $CLIENTHOME/$hostid/temp/90-footer
	        echo "1" > $CLIENTHOME/$hostid/temp/$WDEF
	elif [ "$(cat $CLIENTHOME/$hostid/temp/$WDEF)" == "0" ] 
	then
		echo "Do nothing" >/dev/null
	else
		dialog --backtitle "Client Management" --title "Error Message" --msgbox "Found an error in configuration files." 6 60
		return 2
	fi

	host_deploy_config $hostid silent
	
	# get response
	response=$?
	
	if [ "$response" == "1" ]
	then
		return 1
	fi		

	return 0
}

host_is_it_member() {
        local hostid="$1"     
        local membership=$(ls $CLIENTHOME/$hostid/temp/grp.* 2>/dev/null)

        if [ -z "$membership" ]        
        then
                return 1
        else
                echo ${membership##*.}         
                return 0      
        fi
}

host_add() {
	# local variables
	local output=$(mktemp /tmp/usb.XXXXXXX)
	local hostid
	local response
	local method

	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	
	while true
	do
	    # find host (from logs, cert list or manual)
	    dialog --backtitle "Client Management" --title "Choose Method" --menu "Choose a method to enter hostname\nPress cancel to return to Client Menu" 11 60 4 Puppet "Based puppet cert list" Log "Search hostname in logs" Manual "Enter hostname manualy" 2> $output

	    # get response
	    response=$?

	    # if user cancel the dialog or press escape 
	    if [ "$response" == "1" -o "$response" == "255" ]
	    then 
	    	# remove temp 	    	[ -f "$output" ] && rm $output
	    	[ -f "$output" ] && rm $output
	    	
	    	return 1
	    fi
	    
	    # get method
	    method=$(<$output)

	    # Puppet, Log or Manual
	    case $method in 
	    	Puppet) host_puppet_entry hostid ;;
	    	Log) host_log_entry hostid ;;
	    	Manual) host_manual_entry hostid ;;
	    esac
	    
	    # hostid validation
	    if [ -z "$(echo "$hostid" | egrep "^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9_-]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,})$")" ] 
	    then
	    	dialog --backtitle "Client Management" --title "Error Message" --msgbox "Entered hostname is invalid, please use valid format" 6 60
	    	
	    elif [ ! -z "$(ls $CLIENTHOME | grep "^$hostid$")" ]
	    then
	    	dialog --backtitle "Client Management" --title "Error Message"  --msgbox "This host is exists" 5 25
	    else
		##bug
		##check client singed or not
		# sign client
		host_sign $hostid

		if [ "$?" != "0" ]
		then
			dialog --backtitle "Client Management" --title "Error Message"  --msgbox "Signing client failed. Please sign and force to deply config later" 5 40
		fi

		# prepare host config
	    	mkdir -p $CLIENTHOME/$hostid 
	    	cp -ar /etc/yasa/skell/{etc,temp} $CLIENTHOME/$hostid

		##bug
		##must have gauge bar for user friendly
		host_deploy_config $hostid 
		break
	    fi
	done

	# echo added successfully
	dialog --backtitle "Client Management" --title "Add Host" --msgbox "$hostid added successfully" 6 40
	
	return 0
}

host_del() {
	## This function deactive yasa on client and remove its config from
	## Yasa configuration manager. If cant disable client remove have been
	## failed

	local hostid
	local response
	local output=$(mktemp /tmp/output.XXXXXXX) 
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

        # list all hosts      
        dialog --backtitle "Client Management" --title "Choose host(s) to delete from Yasa" --menu "Choose a hostname to delete from Yasa" 11 60 10 $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $output 
        
	# get response
	response=$?
	
        # if user press cancel, escape 
	if [ "$response" == "1" -o "$response" == "255" -o -z "$(<$output)" ]
        then 
                # remove temp file             
                [ -f "$output" ] && rm $output

                return 1
        fi

	# get hostname
	hostid=$(<$output)

	# confirmation
        dialog --backtitle "Client Management"  --title " Warning " --yesno "Do you realy want delete the host?" 6 50

	# get response
	response=$?
	
        # if user press cancel or escape
	if [ "$response" == "1" -o "$response" == "255" ]
        then
                 # remove temp file
                 [ -f "$output" ] && rm $output

                 return 1
        fi

	# first disable yasa
	host_disable_yasa $hostid

	# get response
	response=$?

	# if disable yasa failed stop.
	if [ "$response" == "2" ]
	then
		return 1
	elif [ "$response" != "0" ]
	then
        	dialog --backtitle "Client Management" --msgbox "Disabling $hostid, failed. Host not deleted from Yasa" 5 70
		
		# remove temp file
		[ -f "$output" ] && rm $output
		
		return 1
	fi

        # if all not selected
        rm -r $CLIENTHOME/$hostid

        dialog --backtitle "Client Management" --msgbox "The host deleted successfuly." 5 40

	# remove temp file
	[ -f "$output" ] && rm $output
	
	return 0
}

host_modify() {
	# Modify host rule
	
	# lacal variables
	local hostid
	local response
	local output=$(mktemp /tmp/output.XXXXXXX) 
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM

        # list all hosts      
        dialog --backtitle "Client Management" --title "Choose host(s) to delete from Yasa" --menu "Choose a hostname to delete from Yasa" 11 60 10 $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} " | tr -d "\n"; done) 2> $output 
        
	# get response
	response=$?
	
        # if user press cancel, escape 
	if [ "$response" == "1" -o "$response" == "255" -o -z "$(<$output)" ]
        then 
                # remove temp file             
                [ -f "$output" ] && rm $output

                return 1
        fi

	# get hostname
	hostid=$(<$output)

	# check that not in any group
	host_is_it_member $hostid

	# get response                 
	response=$?                    
	
	if [ "$response" == "0" ]      
	then                           
	        groupid=$(host_is_it_member $hostid)
	        dialog --msgbox "$hostid is memeber of \"$groupid\" group\nPlease modify group for make change in whitelist" 7 55   
	
	        # remove temp file if exist    
	        [ -f "$output" ] && rm $output
	
	        return 1                       
	
	fi   

	# modify class
	host_modify_class $hostid

	# if press cancel remove group folder
	response=$?

	if [ "$response" == "1" ]
	then
		[ -f "$output" ] && rm $output
		return 1
	fi

	# Modify device whitelist
	while true
	do
		# modify device that allow in group
		host_modify_dev $hostid

		# if press cancel remove group folder
		response=$?

		if [ "$response" == "1" ]
		then
			break
		fi
	     
	     # add another device
	     dialog --backtitle "Client Management" --title " Another Device " --yesno "Do you add another device to whitelist?" 6 50
	     
	     # get response
	     response=$?

	     if [ "$response" == "0" ]
	     then
	     	continue
	     else
	     	break
	     fi
	done

	# remove temp file
	[ -f "$output" ] && rm $output

	return 0
}

host_show() {
	echo N
}

host_en_dis() {
	echo N
}

host_force_update() {
	# temperorly file 
        output=$(mktemp /tmp/usb.XXXXXXXX)
	failedhost=$(mktemp /tmp/usb.XXXXXXXX)

        # trap and delete temp file
        trap "rm $output; exit" SIGHUP SIGINT SIGTERM
        trap "rm $failedhost; exit" SIGHUP SIGINT SIGTERM

	# local variables
	local hostid
	local response
	local hostsum

	hostsum=$(ls $CLIENHOME | wc -l)

	dialog --title "Choose host(s)" --checklist "Choose one/more/all host(s) to update whitelist" 10 60 $hostsum all hosts off $(for i in $CLIENTHOME/*; do j=${i##*/}; echo "$j ${j%%.*} off " | tr -d "\n"; done) 2> $output
	
	# get response
	response=$?

	if [ "$response" == "1" -o "$response" == "255" ]
	then
		[ -f "$output" ] && rm $output
		[ -f "$failedhost" ] && rm $failedhost
		return 1
	fi

	if [ -z "$(<$output)" ]
	then
		[ -f "$output" ] && rm $output
		[ -f "$failedhost" ] && rm $failedhost
		return 1
	fi

	for hostid in $(<$output)	
	do
	    if [ "$hostid" == all ]
	    then
		for hostid in $(ls $CLIENTHOME)
		do
		    host_write_rule $hostid
		    host_deploy_config $hostid silent >> $failedhost		
		done
		break
	    fi
	    host_write_rule $hostid
	    host_deploy_config $hostid silent >> $failedhost		
	done

	if [ -z "$(<$failedhost)" ]
	then
		echo "Client configuration deployment Process successfuly done." > $failedhost
		dialog --backtitle "Yasa Management" --title "Client Deployment" --textbox $failedhost 10 80
	else
		dialog --backtitle "Yasa Management" --title "Failed Host(s)" --textbox $failedhost 10 80
	fi

	# remove temp file
	[ -f "$output" ] && rm $output
	[ -f "$failedhost" ] && rm $failedhost

	return 0

}

host_mgmt_menu() {
	# Menu input
	local output=$(mktemp /tmp/usb.XXXXXXXX)
	local response
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	trap "" SIGINT

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Client Management Menu" \
	        --title "[ C L I E N T - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 16 65 6 \
		1 "Add new host" \
		2 "Delete a host" \
		3 "Modify a host" \
		4 "Enable/Disable Yasa on the client" \
		5 "Force Deploy Rule" \
	        Exit "Return to Main Menu" 2>"${output}"
	
		# get response
		response=$?

		# if user enter cancel or press esc
		if [ "$response" == "1" -o "$response" == "255" ]
		then
		        # remove temp file
		        [ -f "$output" ] && rm $output

			return 0
		fi

	        # make decision
	        case $(<$output) in
			1) host_add;;
			2) host_del;;
			3) host_modify;;
	                4) host_en_dis;;
			5) force_deploy;;
	                Exit) echo "Bye"; break;;
	        esac
	

	done	
	return 0
}

group_mgmt_menu() {
	# Menu input
	local output=$(mktemp /tmp/usb.XXXXXXXX)
	local response
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	trap "" SIGINT

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Group Management Menu" \
	        --title "[ G R O U P - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 16 65 6 \
		1 "Add new group" \
		2 "Delete a group" \
		3 "Modify group" \
		4 "Show group (show member and rules)" \
	        Exit "Return to Main Menu" 2>"${output}"
	
		# get response
		response=$?

		# if user enter cancel or press esc
		if [ "$response" == "1" -o "$response" == "255" ]
		then
		        # remove temp file
		        [ -f "$output" ] && rm $output

			return 0
		fi

	        # make decision
	        case $(<$output) in
			1) group_add;;
			2) group_del;;
			3) group_modify;;
			4) group_show;;
	                Exit) break;;
	        esac
	

	done	
	return 0
}

report_menu() {
	# Menu input
	local output=$(mktemp /tmp/usb.XXXXXXXX)
	local response
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	trap "" SIGINT

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Report Menu" \
	        --title "[ R E P O R T - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 16 65 6 \
		1 "Show restricted client" \
		2 "Show full access client" \
	        Exit "Return to Main Menu" 2>"${output}"
	
		# get response
		response=$?

		# if user enter cancel or press esc
		if [ "$response" == "1" -o "$response" == "255" ]
		then
		        # remove temp file
		        [ -f "$output" ] && rm $output

			return 0
		fi
	
	        # make decision
	        case $(<$output) in
			1) report_active;;
			2) report_deactive;;
	                Exit) break;;
	        esac
	

	done	
	return 0
}

yasa_advanced_menu() {
	# Menu input
	local output=$(mktemp /tmp/usb.XXXXXXXX)
	local response
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	trap "" SIGINT

	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Install Menu" \
	        --title "[ M A N A G E M E M E N T - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-9 to choose an option.\
	        Choose the TASK" 16 65 9 \
		1 "Intall new client wizard" \
		2 "Prepare server installation" \
		3 "Signing Client Request" \
		4 "Accept Ready Client" \
	        Exit "Return to Main Menu" 2>"${output}"
	
		# get response
		response=$?

		# if user enter cancel or press esc
		if [ "$response" == "1" -o "$response" == "255" ]
		then
		        # remove temp file
		        [ -f "$output" ] && rm $output

			return 0
		fi

	        # make decision
	        case $(<$output) in
			1) install_client_wizard;;
			2) yasa_paration;;
			3) force_client_update;;
			4) accept_ready_client;;
	                Exit) break;;
	        esac
	
	done	
	return 0
}

main_menu() {
	# Menu input
	output=$(mktemp /tmp/usb.XXXXXXXX)
	local response
	
	# trap and delete temp file
	trap "rm $output; exit" SIGHUP SIGINT SIGTERM
	trap "" SIGINT
	
	while true
	do
	        ### display main menu ###
	        /usr/bin/dialog --clear --backtitle "Yasa Main Menu" \
	        --title "[ M A I N - M E N U ]" \
	        --menu "You can use the UP/DOWN arrow keys, the first \
	        letter of the choice as a hot key, or the \
	        number keys 1-4 to choose an option.\
	        Choose the TASK" 16 65 5 \
		1 "Client Management" \
		2 "Group Management" \
	        3 "Reports" \
	        4 "Yasa Management and Utility" \
	        Exit "Exit and Logout" 2>"$output"
	
		# get response
		response=$?

		# if user enter cancel or press esc
		if [ "$response" == "1" -o "$response" == "255" ]
		then
		        # remove temp file
		        [ -f "$output" ] && rm $output

			return 0
		fi

	        # make decision
	        case $(<$output) in
			1) host_mgmt_menu;;
			2) group_mgmt_menu;;
	                3) report_menu;;
	                4) yasa_advanced_menu;;
	                Exit) echo "Bye"; break;;
	        esac
	done
	
	[ -f "$output" ] && rm $output

	return 0
}

# Non-interactive mod
if [ ! -z "$1" ]
then
	if [ "$1" = "cron" ]
	then
		yasacron
	elif [ "$1" = "auth" ]
	then
		yasaauth $2 $3
	elif [ "$1" == "web" ]
	then
		[ -z "$2" ] && exit 1
		case "$2" in
			1) echo "N" ;;
		esac
	fi

# Interactive mod
else
	main_menu
fi

exit 0
